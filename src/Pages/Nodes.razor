@page "/nodes"
@using System.Security.Claims
@using System.Threading
@using FundsManager.Jobs
@using Humanizer
@using Quartz

@attribute [Authorize(Roles = "FinanceManager, NodeManager, Superadmin")]
<PageTitle>Active Nodes</PageTitle>
<h3 class="custom-primary">Nodes</h3>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Node"
                  Data="@_nodes"
                  Editable="@_editable"
                  EditMode="DataGridEditMode.Popup"
                  @bind-SelectedRow="@_selectedNode"
                  Responsive="true"
                  ResizeMode="TableResizeMode.Columns"
                  UseInternalEditing="true"
                  RowInserted="OnRowInserted"
                  RowUpdated="OnRowUpdated"
                  UseValidation="true">
            <PopupTitleTemplate>
                <h2>@(context.EditState) node</h2>
            </PopupTitleTemplate>
            <DataGridColumns>
                <DataGridCommandColumn TItem="Node" Width="120px">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" TextColor="TextColor.Light" Clicked="@context.Clicked" Block>New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Block>Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" hidden="@_hideDelete" Clicked="@(()=> ShowDeleteDialog(context.Item))" Size="Size.Small" Block>Delete</Button>
                    </DeleteCommandTemplate>
                </DataGridCommandColumn>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.Name)" Validator="ValidationHelper.ValidateName" Caption="@nameof(Node.Name)" Sortable="false"/>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.PubKey)" Caption="@nameof(Node.PubKey)" Sortable="false" Width="220px">
                    <DisplayTemplate>
                        @StringHelper.TruncateHeadAndTail(context.PubKey, 6)&nbsp;
                        @{State state = new("Copy", "oi oi-clipboard");}
                        <Button Color="Color.Primary" Size="Size.Small" Outline @onclick="@(() => CopyToClipboard(context.PubKey))" disabled=@state.IsDisabled>
                            <i class="@state.ClassName"></i>
                        </Button>
                    </DisplayTemplate>
                    <EditTemplate>
                        <Validation Validator="@((ValidatorEventArgs obj) => @ValidationHelper.ValidatePubKey(obj, _nodes, context.Item.PubKey))">
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="(text) => { context.CellValue = text; }">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Validation>
                    </EditTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.Description)" Caption="@nameof(Node.Description)" Sortable="false"/>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.ChannelAdminMacaroon)" Validator="ValidationRule.IsNotEmpty" Caption="Macaroon" CellsEditableOnNewCommand="true" CellsEditableOnEditCommand="false" Displayable="false" Sortable="false"/>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.Endpoint)" Validator="ValidationRule.IsNotEmpty" Caption="@nameof(Node.Endpoint)" Sortable="false"/>
                <DataGridNumericColumn TItem="Node" Editable="false" Caption="Outbound Open Channels" Sortable="false">
                    <DisplayTemplate>
                        @{
                            IEnumerable<int?> associatedChannels = context?.ChannelOperationRequestsAsDestination?
                                .Where(request => request.ChannelId != null)
                                .Select(channel => channel.ChannelId)
                                .Distinct();
                            @($"{associatedChannels?.Count()}")
                        }
                    </DisplayTemplate>
                </DataGridNumericColumn>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.ReturningFundsWalletId)" Caption="Returning funds wallet" Sortable="false">
                    <DisplayTemplate>
                        @if (context.ReturningFundsWallet != null)
                        {
                            @context.ReturningFundsWallet.Name
                        }
                    </DisplayTemplate>
                    <EditTemplate>
                        @if (context.CellValue == null)
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_availableWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValueChanged="(id) => context.CellValue = id"
                                        DefaultItemText="Choose the returning funds wallet"/>
                        }
                        else
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_availableWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValue="(int)context.CellValue"
                                        SelectedValueChanged="(id) => context.CellValue = id"/>
                        }

                    </EditTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Node" Editable="true" Field="@nameof(Node.AutosweepEnabled)" Caption="Autosweep" Sortable="false"></DataGridColumn>
                <DataGridColumn TItem="Node" Field="@nameof(Node.CreationDatetime)" Caption="Creation Date" Sortable="false">
                    <DisplayTemplate>
                        @context.CreationDatetime.Humanize()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Node" Field="@nameof(Node.UpdateDatetime)" Caption="Update date" Sortable="false">
                    <DisplayTemplate>
                        @context.UpdateDatetime.Humanize()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Node" Caption="@nameof(Node.Users)" Editable="false" CellsEditableOnEditCommand="false" Sortable="false">
                    <DisplayTemplate>
                        <Button Color="Color.Primary" Clicked="@ShowModal" Block>Display Users</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </Column>
</Row>
<Modal @bind-Visible="@_modalVisible" >
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Users assigned to Node: @_selectedNode?.Name</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
           <DataGrid TItem="ApplicationUser"
                     Data=@_selectedNode?.Users
                     Sortable="false"
                     ShowCaptions="true">
               <DataGridColumn Field="@nameof(ApplicationUser.Id)" Caption="@nameof(ApplicationUser.Id)" />
               <DataGridColumn Field="@nameof(ApplicationUser.UserName)" Caption="@nameof(ApplicationUser.UserName)" />
           </DataGrid>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Back</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@inject INodeRepository NodeRepository
@inject IToastService ToastService;
@inject ClipboardService ClipboardService
@inject IMessageService MessageService
@inject IWalletRepository WalletRepository
@inject ISchedulerFactory  SchedulerFactory
@inject ILightningService LightningService
@implements IDisposable
@code {
    private List<Node>? _nodes;
    private Node? _selectedNode;
    private bool _modalVisible;
    private bool _hideDelete = true;
    private bool _editable;
    private List<Wallet> _availableWallets = new List<Wallet>();

    CancellationTokenSource cts = new();

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser != null)
        {
            await GetData();
            // Add button for copy key (js interop passing the content of the strings)
            // https://www.meziantou.net/copying-text-to-clipboard-in-a-blazor-application.htm

            if (ClaimsPrincipal != null && ClaimsPrincipal.IsInRole(ApplicationUserRole.Superadmin.ToString()))
            {
                _editable = true;
                _hideDelete = false;
            }
        }
    }

    private async Task GetData()
    {
        _nodes = await NodeRepository.GetAllManagedByNodeGuard();
        _availableWallets = await WalletRepository.GetAvailableWallets();
    }

    private async Task OnRowInserted(SavedRowItem<Node, Dictionary<string, object>> arg)
    {
        if (arg.Item == null)
        {
            ToastService.ShowError("Couldn't fetch data");
        }
        else
        {
            arg.Item.UpdateDatetime = DateTimeOffset.Now;
            arg.Item.CreationDatetime = DateTimeOffset.Now;
            var addResult = await NodeRepository.AddAsync(arg.Item);
            if (addResult.Item1)
            {
                ToastService.ShowSuccess($"Node {arg.Item.Name} Created");
                _nodes = await NodeRepository.GetAll();
                await CreateJobs(arg.Item);

            }
            else
            {
                ToastService.ShowError("Something went wrong");
                _nodes?.Remove(arg.Item);
            }
        }

        await GetData();
    }

    private async Task OnRowUpdated(SavedRowItem<Node, Dictionary<string, object>> arg)
    {
        if (arg.Item == null)
        {
            ToastService.ShowError("Couldn't fetch data");
        }
        else
        {
            arg.Item.UpdateDatetime = DateTimeOffset.Now;
            var updateResult = NodeRepository.Update(arg.Item);


            if (updateResult.Item1)
            {
                ToastService.ShowSuccess($"Node {arg.Item.Name} Updated");
            }
            else
            {
                ToastService.ShowError("Something went wrong");
            }
        }

        await GetData();
    }

    private void ShowModal()
    {
        _modalVisible = true;
    }

    private void HideModal()
    {
        _modalVisible = false;
    }

    private async Task CopyToClipboard(String pubkey)
    {
        await ClipboardService.WriteTextAsync(pubkey);
        ToastService.ShowSuccess("Text copied");
    }

    public void Dispose()
    {
        cts.Cancel(); // Cancel Task.Delay
        cts.Dispose();
    }
    
    private async Task ShowDeleteDialog(Node node)
    {
        if (await MessageService.Confirm($"Are you sure you want to delete { node.Name }?", "Confirmation"))
        {
            if (node != null)
            {
                var (result, _) = NodeRepository.Remove(node);
                if (!result)
                {
                    ToastService.ShowError($"{node.Name} could not be deleted");
                }
                else
                {
                    ToastService.ShowSuccess($"{node.Name} deleted successfully");
                    _nodes = await NodeRepository.GetAll();

                }
                
            }
        }

        await GetData();

    }
    
    private async Task CreateJobs(Node node)
    {
        try
        {
            IScheduler scheduler = await SchedulerFactory.GetScheduler();

            var map = new JobDataMap();
            map.Put("nodeId", node.Id);

            var job = SimpleJob.Create<NodeChannelSuscribeJob>(map, node.Id.ToString());
            await scheduler.ScheduleJob(job.Job, job.Trigger);

            node.JobId = job.Job.Key.ToString();

            var jobUpdateResult = NodeRepository.Update(node);

            map = new JobDataMap();
            map.Put("managedNodeId", node.Id.ToString());
            
            var acceptorJob = SimpleJob.Create<ProcessNodeChannelAcceptorJob>(map, node.Id.ToString());
            await scheduler.ScheduleJob(acceptorJob.Job, acceptorJob.Trigger);
            
            ToastService.ShowSuccess("Node subscription job created");
        }
        catch
        {
            ToastService.ShowError("Error while requesting to open the channel, please contact a superadmin for troubleshooting");
        }
    }

    record State(string Text, string ClassName, bool IsDisabled = false);

}