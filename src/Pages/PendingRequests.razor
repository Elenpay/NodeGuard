@page "/pending-requests"
@using System.Security.Claims
@using Blazorise.Extensions
@using Hangfire
@using Humanizer
@using NBitcoin
@attribute [Authorize(Roles = "FinanceManager, Superadmin")]

<PageTitle>Pending Requests</PageTitle>
<h3>Requests awaiting my signature</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          Data="@_channelRequests"
          CustomFilter="@RequestPendingFilter"
          ShowPager="true"
          ShowPageSizes="true"
          Editable="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    if (context.RequestType == OperationRequestType.Open)
                    {
                        var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                        var signaturesRequired = context.Wallet?.MofN ?? 0;
                        @($"{signaturesCollected} out of {signaturesRequired}")
                    }
                    else
                    {
                        @("N/A");
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridCommandColumn TItem="ChannelOperationRequest" Caption="Actions" Displayable="true">
            <NewCommandTemplate>
                <Button Color="Color.Primary" hidden ></Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" hidden=@_hideApprove Clicked="@(()=> ShowModal(context.Item))">Approve</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Primary" hidden ></Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>
<br />
<br />
<h3>All Pending Requests</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          Data="@_allRequests"
          CustomFilter="@RequestPendingFilter"
          ShowPager="true"
          ShowPageSizes="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    if (context.RequestType == OperationRequestType.Open)
                    {
                        var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                        var signaturesRequired = context?.Wallet?.MofN ?? 0;
                        @($"{signaturesCollected} out of {signaturesRequired}")
                    }
                    else
                    {
                        @("N/A");
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="@nameof(ChannelOperationRequest.CreationDatetime)" Sortable="false" />
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="@nameof(ChannelOperationRequest.UpdateDatetime)" Sortable="false" />
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.TxId)" Caption="Links" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @if (mempoolUrl != null && !context.TxId.IsNullOrEmpty())
                {
                    <a href="@(mempoolUrl + "/tx/" + context.TxId)" target="_blank">See in Mempool</a>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>
<Modal @bind-Visible="@_modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sign Operation: @_selectedRequest?.Id</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible>
                <AlertMessage>Please sign the following PSBT with your Software/Hardware wallet  <Button Color="Color.Primary" Clicked="CopyPSBTToClipboard">
                    <i class="oi oi-clipboard"></i> 
                </Button>
                </AlertMessage>
                <MemoEdit Rows="4" @bind-Text="_templatePSBTString" Disabled="true"></MemoEdit>
               
            </Alert>
            <Fields Flex="Flex.JustifyContent.Center">
                <Field>
                    <Validation Validator="ValidatePSBT">
                        <FieldLabel>To sign this operation, please paste here your PSBT in base64 string</FieldLabel>
                        <MemoEdit Rows="4" @bind-Text="@_psbt">
                            <ValidationError />

                        </MemoEdit>
                    </Validation>
                </Field>
            </Fields>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button Color="Color.Primary" Disabled="_isSignedPSBTInvalid" Clicked="@ApproveRequest">
               Approve
            </Button>
            

        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="_channelSpinner">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Waiting for the channel to be confirmed within 3 blocks...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <SpinKit Centered="true" Size="50px" Type="SpinKitType.Circle" />
        </ModalBody>
        <ModalFooter
            ></ModalFooter>
    </ModalContent>
</Modal>


@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IChannelOperationRequestPSBTRepository ChannelOperationRequestPsbtRepository
@inject IToastService ToastService
@inject ILightningService LightningService
@inject IBackgroundJobClient  BackgroundJobClient
@inject ClipboardService ClipboardService
@code {
    private List<ChannelOperationRequest>? _channelRequests;
    private List<ChannelOperationRequest>? _allRequests;
    private List<ChannelOperationRequest>? _allUserRequest;
    private ChannelOperationRequest? _selectedRequest;
    private bool _hideApprove;
    private bool _modalVisible;
    private string? _psbt;
    private string? _templatePSBTString;
    private bool _isSignedPSBTInvalid = true;

    private Modal _channelSpinner;
    private string? mempoolUrl = Environment.GetEnvironmentVariable("MEMPOOL_ENDPOINT");

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal {get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser != null)
        {
            await FetchRequests();
            if (ClaimsPrincipal != null && !ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString()))
            {
                _hideApprove = true;
            }
        }
    }

    private async Task FetchRequests()
    {
        if (LoggedUser != null)
        {
            _channelRequests = await ChannelOperationRequestRepository.GetUnsignedPendingRequestsByUser(LoggedUser.Id);
            _allUserRequest = await ChannelOperationRequestRepository.GetPendingRequestsByUser(LoggedUser.Id);
            _allRequests = new List<ChannelOperationRequest>();
            foreach (var userRequest in _allUserRequest)
            {
                if (_channelRequests.All(req => req.Id != userRequest.Id))
                {
                    _allRequests.Add(userRequest);
                }
            }
        }
    }
    
    private static bool RequestPendingFilter(ChannelOperationRequest req)
    {
        return req.Status.Equals(ChannelOperationRequestStatus.Pending);
    }

    private async Task ShowModal(ChannelOperationRequest channelOperationRequest)
    {
        _selectedRequest = channelOperationRequest;
        _psbt = string.Empty;
        if (_selectedRequest != null && !_selectedRequest.AreAllRequiredSignaturesCollected) {
            var (templatePsbt,noUtxosAvailable) = (await LightningService.GenerateTemplatePSBT(_selectedRequest));
            if (templatePsbt != null)
            {
                _templatePSBTString = templatePsbt.ToBase64();
                _modalVisible = true;

            }
            else
            {
                if (noUtxosAvailable)
                {
                    ToastService.ShowError("No UTXOs found for this wallet, please wait for other requests to be confirmed or fund the wallet with more UTXOs");

                }
                else
                {
                    ToastService.ShowError("Something went wrong");

                }
            }
            
        }
    }

    private async Task HideModal()
    {
        _modalVisible = false;
        _templatePSBTString = null;
        _isSignedPSBTInvalid = true;

    }

    private async Task ApproveRequest()
    {
        await HideModal();

        if (_selectedRequest == null || _psbt == null || LoggedUser == null)
        {
            ToastService.ShowError("Error: Not all fields were set");
        }
        else {
            ChannelOperationRequestPSBT psbt = new()
            {
                ChannelOperationRequestId = _selectedRequest.Id,
                PSBT = _psbt,
                UserSignerId = LoggedUser.Id,
                
            };
            var addResult = await ChannelOperationRequestPsbtRepository.AddAsync(psbt);

            if (addResult.Item1)
            {
                ToastService.ShowSuccess("Signature collected");

                _selectedRequest = await ChannelOperationRequestRepository.GetById(_selectedRequest.Id);

                if (_selectedRequest != null 
                    && _selectedRequest.AreAllRequiredSignaturesCollected 
                    && PSBT.TryParse(_psbt, CurrentNetworkHelper.GetCurrentNetwork(), out _))
                {
                    var failedOpenChannelRequest = false;
                    try
                    {  
                       //TODO Async notifications when the channel has opened -> event / notifications system
                        await _channelSpinner.Show();

                        var jobId = BackgroundJobClient.Enqueue<ILightningService>(service => service.OpenChannel(_selectedRequest, _psbt));

                        _selectedRequest.JobId = jobId;

                        var jobUpdateResult = ChannelOperationRequestRepository.Update(_selectedRequest);
                    }
                    catch
                    {
                        failedOpenChannelRequest = true;
                    }

                    await _channelSpinner.Close(CloseReason.UserClosing);
                    if (failedOpenChannelRequest)
                    {
                        ToastService.ShowError("Error while requesting to open the channel, please contact a superadmin for troubleshooting");

                    }
                    else
                    {
                        ToastService.ShowSuccess("Channel opening job created");
                    }

                }
                else
                {
                    ToastService.ShowError("Invalid PSBT");

                }
            }
            else
            {
                ToastService.ShowSuccess("Error while saving the signature");

            }
        
            await FetchRequests();
            await _channelSpinner.Close(CloseReason.UserClosing);

        }
        
      
    }

    private async Task CopyPSBTToClipboard()
    {
        await ClipboardService.WriteTextAsync(_templatePSBTString); 
        ToastService.ShowSuccess("PSBT copied");
    }

    private void ValidatePSBT(ValidatorEventArgs obj)
    {
        var psbtBase64 = (string) obj.Value;
        //Error by default
        obj.Status = ValidationStatus.Error;
        obj.ErrorText = string.Empty;

        if (psbtBase64 != null && PSBT.TryParse(psbtBase64, CurrentNetworkHelper.GetCurrentNetwork(), out var templatePSBT))
        {
            if(PSBT.TryParse(psbtBase64,CurrentNetworkHelper.GetCurrentNetwork(), out var parsedPSBT))
            {
                var templateInputsOutpoints = templatePSBT.Inputs.Select(x => x.PrevOut).ToList();
                var parsedPSBTInputsOutpoints = parsedPSBT.Inputs.Select(x => x.PrevOut).ToList();

                //TXID Validation
                if (parsedPSBT.GetGlobalTransaction().GetHash() != templatePSBT.GetGlobalTransaction().GetHash())
                {
                    obj.ErrorText += "Invalid PSBT, the transactions id do not match. ";

                }                
                //If all the inputs are not signed this is invalid
                else if (!parsedPSBT.Inputs.All(x => x.PartialSigs.Any())) 
                {
                    obj.ErrorText += "Invalid PSBT, please make sure to use SIGHASH_NONE and that every input is signed. ";
                    obj.Status = ValidationStatus.Error;
                }

                //Sighash_NONE check
                else if (parsedPSBT.Inputs.Any(x=> x.SighashType != SigHash.None))
                {
                    obj.ErrorText += "Invalid PSBT, please make sure to use SIGHASH_NONE and that every input is signed. ";
                    obj.Status = ValidationStatus.Error;
                }
                //If the inputs outpoints (utxos) are not the same to the template invalidate it
                else if (templateInputsOutpoints.Union(parsedPSBTInputsOutpoints).Count() != templateInputsOutpoints.Count())
                {
                    obj.ErrorText += "Invalid PSBT, the UTXOs do not match ";
                    obj.Status = ValidationStatus.Error;
                }
                else
                {
                    //It looks good
                    _isSignedPSBTInvalid = false;
                    obj.Status = ValidationStatus.Success;
                }
            }else
            {
                obj.ErrorText = "Invalid PSBT, it could not be parsed";
            }
        }
        else
        {
            obj.ErrorText = "Invalid template PSBT, it could not be parsed";
        }

       
    }

}