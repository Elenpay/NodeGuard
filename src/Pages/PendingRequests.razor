@page "/pending-requests"
@using System.Security.Claims
@using Blazorise.Extensions
@using Hangfire
@using Humanizer
@using NBitcoin
@attribute [Authorize(Roles = "FinanceManager, Superadmin, NodeManager")]

<PageTitle>Channel Operation Requests</PageTitle>

@if (!_hidePendingRequests)
{
    <Field Flex="Flex.JustifyContent.Between">
        <h3>Requests awaiting my signature</h3>
        <Button Color="Color.Success" Clicked="async () => await datagridRef.New()">New</Button>
        @*Recoger el task que crea el datagrid new*@
    </Field>
    <br />
    <DataGrid TItem="ChannelOperationRequest"
              @ref="datagridRef"
              Data="@_channelRequests"
              CustomFilter="@RequestPendingFilter"
              EditMode="DataGridEditMode.Popup"
              ShowPager="true"
              ShowPageSizes="true"
              Editable="true"
              Striped="true">
        <PopupTitleTemplate>
            <h2>Create Channel Request</h2>
        </PopupTitleTemplate>
        <ChildContent>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true" />
            <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true" Validator="ValidationRule.IsSelected">
                <EditTemplate>
                    <SelectList TItem="Node"
                                TValue="int"
                                Data="@_manageableNodes"
                                TextField="@((item) => item.Name)"
                                ValueField="@((item) => item.Id)"
                                SelectedValueChanged="@OnSelectedSourceNode"
                                DefaultItemText="Choose the source node" />
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true"
                            Validator="ValidationRule.IsAlphanumeric">
                <EditTemplate>
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@_destNodeName" Placeholder="Type the destination Node public key" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Clicked="@SearchNode">Search</Button>
                        </Addon>
                    </Addons>
                    <FieldHelp>@(_selectedDestNode==null ? "Node Not found" : $"Found Node: {_selectedDestNode.Name}") </FieldHelp>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true">
                <DisplayTemplate>
                    @if (context.Wallet != null)
                    {
                        @($"{context.Wallet.Name} ({context.Wallet.MofN}-of-{context.Wallet.Keys.Count})")
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Validation Validator="@ValidationRule.IsSelected">
                        @if (context.CellValue == null || (int)context.CellValue == 0)
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_allWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValueChanged="(id) => OnSelectedWallet(id)"
                                        DefaultItemText="Choose the wallet">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </SelectList>
                        }
                        else
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_allWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValueChanged="(id) => OnSelectedWallet(id)"
                                        SelectedValue="(int) context.CellValue">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </SelectList>
                        }
                    </Validation>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true">
                <DisplayTemplate>
                    @{
                        @($"{context.Amount} BTC")
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <NumericEdit TValue="long" Min="20000L" @bind-Value="@_amount" />
                    <FieldHelp>Amount in Satoshis. Minimum 20.000.</FieldHelp>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
                <DisplayTemplate>
                    @{
                        if (context.RequestType == OperationRequestType.Open)
                        {
                            var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                            var signaturesRequired = context.Wallet?.MofN ?? 0;
                            @($"{signaturesCollected} out of {signaturesRequired}")
                        }
                        else
                        {
                            @("N/A")
                        }
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true">
                <DisplayTemplate>
                    @context?.Status.Humanize()
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridCommandColumn TItem="ChannelOperationRequest" Caption="Actions" Displayable="true">
                <EditCommandTemplate>
                    <Button Color="Color.Primary" hidden=@_hideApprove Clicked="@(() => ShowModal(context.Item))">Approve</Button>
                    <Button Color="Color.Danger" Clicked="@(() => OpenModalForRejectOrCancelRequest(context.Item, ChannelOperationRequestStatus.Rejected))">Reject</Button>
                </EditCommandTemplate>
                <NewCommandTemplate>
                    <Button hidden/>
                </NewCommandTemplate>
                <DeleteCommandTemplate>
                    <Button Color="Color.Primary" hidden></Button>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@(async () => await CreateChannelRequest())">Save</Button>
                </SaveCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>
        <EmptyTemplate>
            <div class="box">
                No records were found.
            </div>
        </EmptyTemplate>
        <LoadingTemplate>
            <div class="box">
                <progress class="progress is-small is-primary" max="100"></progress>
            </div>
        </LoadingTemplate>
    </DataGrid>
}
<br />
<br />
<h3>All Requests</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          Data="@_allRequests"
          Filterable="true"
          ShowPager="true"
          ShowPageSizes="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Filterable="false" Caption="Actions" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @if (_showCancelButton && IsStatusCancellable(context.Status))
                {
                    <Button Color="Color.Secondary" Clicked="@(() => OpenModalForRejectOrCancelRequest(context, ChannelOperationRequestStatus.Cancelled))">Cancel</Button>
                }
            </DisplayTemplate>
        </DataGridColumn> 
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    if (context.RequestType == OperationRequestType.Open)
                    {
                        var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                        var signaturesRequired = context.Wallet?.MofN ?? 0;
                        @($"{signaturesCollected} out of {signaturesRequired}")
                    }
                    else
                    {
                        @("N/A");
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="Creation Date" Sortable="true">
            <DisplayTemplate>
                @context.CreationDatetime.Humanize()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="Update date" Sortable="true">
            <DisplayTemplate>
                @context.UpdateDatetime.Humanize()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.TxId)" Caption="Links" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @if (mempoolUrl != null && !context.TxId.IsNullOrEmpty())
                {
                    <a href="@(mempoolUrl + "/tx/" + context.TxId)" target="_blank">See in Mempool</a>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>
<PSBTSign @ref="_psbtSignRef" ApproveRequestDelegate="async ()=> await ApproveRequest()"  SigHashMode="SigHash.None"RequestId="_selectedRequest?.Id" TemplatePsbtString="@_templatePSBTString" SignedPSBT="@_psbt"></PSBTSign>
<Modal @bind-Visible="@_rejectCancelModalVisible">

    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@_selectedStatusActionString operation: @_selectedRequest?.Id</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <Fields Flex="Flex.JustifyContent.Center">
                <Field>
                    <Validation @ref="_reasonValidation" Validator="@(_selectedStatus == ChannelOperationRequestStatus.Rejected ? ValidationRule.IsNotEmpty : ValidationRule.None)">
                        <FieldLabel>Please type a reason before performing this operation</FieldLabel>
                        <MemoEdit Rows="4" @bind-Text="@_cancelOrRejectReason">
                            <ValidationError/>
                        </MemoEdit>
                    </Validation>
                </Field>
            </Fields>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideRejectOrCancelModal">Cancel</Button>
            <Button Disabled="@(_reasonValidation?.Validate() == ValidationStatus.Error)" Color="Color.Primary" Clicked="@RejectOrCancelRequest">
                Submit
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IChannelOperationRequestPSBTRepository ChannelOperationRequestPsbtRepository
@inject IToastService ToastService
@inject ILightningService LightningService
@inject IBackgroundJobClient  BackgroundJobClient
@inject IWalletRepository WalletRepository
@inject INodeRepository NodeRepository

@code {
    private List<ChannelOperationRequest>? _channelRequests;
    private List<ChannelOperationRequest>? _allRequests;
    private ChannelOperationRequest? _selectedRequest;
    private ChannelOperationRequestStatus _selectedStatus;
    private bool _hideApprove;
    private bool _showRejectButton;
    private bool _showCancelButton;
    private bool _hidePendingRequests;
    private bool _modalVisible;
    private bool _rejectCancelModalVisible;
    private string? _psbt;
    private string? _templatePSBTString;
    private string? _cancelOrRejectReason;
    private string? _selectedStatusActionString;
    private bool _isSignedPSBTInvalid = true;
    private Validation? _reasonValidation;

    // New Request integration
    private List<Wallet> _allWallets = new List<Wallet>();
    protected DataGrid<ChannelOperationRequest> datagridRef;
    private List<Node>? _manageableNodes;
    private int _selectedSourceNodeId;
    private Node? _selectedDestNode;
    private int _selectedWalletId;
    private string? _destNodeName;
    private long _amount = 20000L;
    private Task _popupTask;

    private string? mempoolUrl = Environment.GetEnvironmentVariable("MEMPOOL_ENDPOINT");

    private PSBTSign? _psbtSignRef;

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal {get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser != null)
        {
            await FetchRequests();
            await LoadData();
            if (ClaimsPrincipal != null && !ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString()))
            {
                _hideApprove = true;
                _showCancelButton = true;
                _hidePendingRequests = true;
            }
            else
            {
                _showRejectButton = true;
            }
        }
    }


    private async Task FetchRequests()
    {
        if (LoggedUser != null)
        {
            _allRequests = await ChannelOperationRequestRepository.GetAll();

            if (ClaimsPrincipal != null && ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString()))
            {
                _channelRequests = await ChannelOperationRequestRepository.GetUnsignedPendingRequestsByUser(LoggedUser.Id);
                _allRequests = _allRequests.Except(_channelRequests).ToList();
            }
        }
    }

    #region New Request Integration

    private async Task LoadData()
    {
        if (LoggedUser != null)
        {
            _manageableNodes = await NodeRepository.GetAllManagedByUser(LoggedUser.Id);
            _allWallets = await WalletRepository.GetAvailableWallets();
        }
    }

    private void OnSelectedSourceNode(int nodeId)
    {
        _selectedSourceNodeId = nodeId;

    }

    private void OnSelectedWallet(int walletId)
    {

        _selectedWalletId = walletId;
    }

    private async Task SearchNode()
    {
        _selectedDestNode = null;
        if (!string.IsNullOrWhiteSpace(_destNodeName))
        {
            var foundNode = await LightningService.GetNodeInfo(_destNodeName);
            if (foundNode != null)
            {

                _selectedDestNode = (await NodeRepository.GetByPubkey(_destNodeName));

                //if not found we create it..
                if (_selectedDestNode == null)
                {
                    _selectedDestNode = new Node
                    {
                        Name = foundNode.Alias,
                        PubKey = _destNodeName,

                    };

                    var nodeAddResult = await NodeRepository.AddAsync(_selectedDestNode);

                    if (nodeAddResult.Item1)
                    {
                        _selectedDestNode = await NodeRepository.GetByPubkey(_selectedDestNode.PubKey);
                    }
                }

                // Refresh the list of available source nodes and take out the one selected
                _manageableNodes = await NodeRepository.GetAllManagedByUser(LoggedUser?.Id!);
                _manageableNodes = _manageableNodes.Where(node => node.Id != _selectedDestNode.Id).ToList();
            }
        }
    }

    private async Task CreateChannelRequest()
    {
        if (_amount != null && _amount >= 20000 && _selectedWalletId > 0 && LoggedUser != null &&
            _selectedSourceNodeId > 0 && _selectedDestNode != null)
        {
            if (_selectedDestNode.Id != _selectedSourceNodeId)
            {
                ChannelOperationRequest request = new()
                {
                    SatsAmount = _amount,
                    RequestType = OperationRequestType.Open,
                    Description = "Created by user via Funds Manager",
                    WalletId = _selectedWalletId,
                    Status = ChannelOperationRequestStatus.Pending, //TODO Reject and cancel
                    UserId = LoggedUser.Id,
                    SourceNodeId = _selectedSourceNodeId,
                    DestNodeId = _selectedDestNode.Id,
                    CreationDatetime = DateTimeOffset.Now,
                    UpdateDatetime = DateTimeOffset.Now
                };

                var createChannelResult = await ChannelOperationRequestRepository.AddAsync(request);
                if (createChannelResult.Item1)
                {
                    ToastService.ShowSuccess("Open channel request created!");
                    await datagridRef.Edit(null);
                }
                else
                {
                    ToastService.ShowError(createChannelResult.Item2);
                }

            }
            else
            {
                ToastService.ShowError("The Source Node cannot be the same as the Destitation Node");
            }
        }
        else
        {
            ToastService.ShowError("Some fields were not properly filled");
        }

        await LoadData();
        await FetchRequests();
    }

    private void NewItemDefaultSetter(ChannelOperationRequest obj)
    {
        if (LoggedUser != null)
        {
            obj.RequestType = OperationRequestType.Open;
            obj.Description = "Created by user via Funds Manager";
            obj.Status = ChannelOperationRequestStatus.Pending;
            obj.UserId = LoggedUser.Id;
            obj.CreationDatetime = DateTimeOffset.Now;
            obj.UpdateDatetime = DateTimeOffset.Now;
        }
    }

    #endregion


    private static bool RequestPendingFilter(ChannelOperationRequest req)
    {
        return req.Status.Equals(ChannelOperationRequestStatus.Pending) || req.Status == ChannelOperationRequestStatus.PSBTSignaturesPending;
    }

    private void OpenModalForRejectOrCancelRequest(ChannelOperationRequest req, ChannelOperationRequestStatus status)
    {
        _selectedRequest = req;
        _selectedStatus = status;
        _rejectCancelModalVisible = true;
        switch(_selectedStatus)
        {
            case ChannelOperationRequestStatus.Rejected: _selectedStatusActionString = "Reject"; break;
            case ChannelOperationRequestStatus.Cancelled: _selectedStatusActionString = "Cancel"; break;
        }
    }

    private async Task RejectOrCancelRequest()
    {
        if (_selectedRequest != null)
        {
            _selectedRequest.ClosingReason = _cancelOrRejectReason;
            _selectedRequest.Status = _selectedStatus;
            var jobUpdateResult = ChannelOperationRequestRepository.Update(_selectedRequest);
            if (!jobUpdateResult.Item1)
            {
                ToastService.ShowError("There has been an error when updating the request");
            }
            else
            {
                ToastService.ShowSuccess("Request " + _selectedStatus);
                await FetchRequests();
            }
        }
        else
        {
            ToastService.ShowError("Couldn't fetch data from the request");
        }
        _rejectCancelModalVisible = false;
    }

    private async Task ShowModal(ChannelOperationRequest channelOperationRequest)
    {
        _selectedRequest = channelOperationRequest;
        _psbt = string.Empty;
        if (_selectedRequest != null && !_selectedRequest.AreAllRequiredSignaturesCollected) {
            var (templatePsbt,noUtxosAvailable) = (await LightningService.GenerateTemplatePSBT(_selectedRequest));
            if (templatePsbt != null)
            {
                _templatePSBTString = templatePsbt.ToBase64();
                await _psbtSignRef.ShowModal();

            }
            else
            {
                if (noUtxosAvailable)
                {
                    ToastService.ShowError("No UTXOs found for this wallet, please wait for other requests to be confirmed or fund the wallet with more UTXOs");

                }
                else
                {
                    ToastService.ShowError("Something went wrong");

                }
            }

        }
    }

    private void HideRejectOrCancelModal()
    {
        _rejectCancelModalVisible = false;
        _cancelOrRejectReason = null;

    }


    private async Task ApproveRequest()
    {
        _psbtSignRef?.HideModal();

        if (_selectedRequest == null || string.IsNullOrEmpty(_psbtSignRef.SignedPSBT) || LoggedUser == null)
        {
            ToastService.ShowError("Error: Not all fields were set");
        }
        else {
            ChannelOperationRequestPSBT channelOperationRequestPsbt = new()
            {
                ChannelOperationRequestId = _selectedRequest.Id,
                PSBT = _psbtSignRef.SignedPSBT,
                UserSignerId = LoggedUser.Id,

            };
            var addResult = await ChannelOperationRequestPsbtRepository.AddAsync(channelOperationRequestPsbt);

            if (addResult.Item1)
            {
                ToastService.ShowSuccess("Signature collected");

                _selectedRequest = await ChannelOperationRequestRepository.GetById(_selectedRequest.Id);

                if (_selectedRequest != null
                    && _selectedRequest.AreAllRequiredSignaturesCollected)
                {
                    var failedOpenChannelRequest = false;
                    try
                    {
                        //TODO Async notifications when the channel has opened -> event / notifications system
                        var jobId = BackgroundJobClient.Enqueue<ILightningService>(service =>
                            service.OpenChannel(_selectedRequest));

                        _selectedRequest.JobId = jobId;

                        var jobUpdateResult = ChannelOperationRequestRepository.Update(_selectedRequest);
                    }
                    catch
                    {
                        failedOpenChannelRequest = true;
                    }

                    if (failedOpenChannelRequest)
                    {
                        ToastService.ShowError("Error while requesting to open the channel, please contact a superadmin for troubleshooting");

                    }
                    else
                    {
                        ToastService.ShowSuccess("Channel opening job created");
                    }

                }
                else
                {
                    ToastService.ShowError("Invalid PSBT");

                }
            }
            else
            {
                ToastService.ShowSuccess("Error while saving the signature");

            }

            await FetchRequests();
            await _psbtSignRef.HideModal();

        }


    }



    private bool IsStatusCancellable(ChannelOperationRequestStatus status)
    {
        return status is ChannelOperationRequestStatus.Pending
            or ChannelOperationRequestStatus.Approved;
    }


}