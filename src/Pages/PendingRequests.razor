@page "/pending-requests"
@using System.Security.Claims
@using FundsManager.Helpers
@using NBitcoin
@attribute [Authorize(Roles = "FinanceManager, Superadmin")]

<PageTitle>Pending Requests</PageTitle>
<h3>Requests awaiting my signature</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          Data="@_channelRequests"
          CustomFilter="@RequestPendingFilter"
          ShowPager="true"
          ShowPageSizes="true"
          Editable="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                    var signaturesRequired = context.Wallet?.MofN ?? 0;
                    @($"{signaturesCollected} out of {signaturesRequired}")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridCommandColumn TItem="ChannelOperationRequest" Caption="Actions" Displayable="true">
            <NewCommandTemplate>
                <Button Color="Color.Primary" hidden ></Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" hidden=@_hideApprove Clicked="@(()=> ShowModal(context.Item))">Approve</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Primary" hidden ></Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>
<br />
<br />
<h3>All Pending Requests</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          Data="@_allRequests"
          CustomFilter="@RequestPendingFilter"
          ShowPager="true"
          ShowPageSizes="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                    var signaturesRequired = context?.Wallet?.MofN ?? 0;
                    @($"{signaturesCollected} out of {signaturesRequired}")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="@nameof(ChannelOperationRequest.CreationDatetime)" Sortable="false" />
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="@nameof(ChannelOperationRequest.UpdateDatetime)" Sortable="false" />
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>
<Modal @bind-Visible="@_modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sign Operation: @_selectedRequest?.Id</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible>
                <AlertMessage>Please sign the following PSBT with your Software/Hardware wallet  <Button Color="Color.Primary" Clicked="CopyPSBTToClipboard">
                    <i class="oi oi-clipboard"></i> 
                </Button>
                </AlertMessage>
                <MemoEdit Rows="4" @bind-Text="_templatePSBT" Disabled="true"></MemoEdit>
               
            </Alert>
            <Fields Flex="Flex.JustifyContent.Center">
                <Field>
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <FieldLabel>To sign this operation, please paste here your PSBT in base64 string</FieldLabel>
                        <MemoEdit Rows="4" @bind-Text="@_psbt">
                            <FieldHelp>Paste here the long string</FieldHelp>
                        </MemoEdit>
                    </Validation>
                </Field>
            </Fields>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@ApproveRequest">
               Approve
            </Button>
            

        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="_channelSpinner">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Waiting for the channel to be confirmed within 3 blocks...</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <SpinKit Centered="true" Size="50px" Type="SpinKitType.Circle" />
        </ModalBody>
        <ModalFooter
            ></ModalFooter>
    </ModalContent>
</Modal>


@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IChannelOperationRequestPSBTRepository ChannelOperationRequestPsbtRepository
@inject IToastService ToastService;
@inject ILightningService LightningService;
@inject ClipboardService ClipboardService
@code {
    private List<ChannelOperationRequest>? _channelRequests;
    private List<ChannelOperationRequest>? _allRequests;
    private List<ChannelOperationRequest>? _allUserRequest;
    private ChannelOperationRequest? _selectedRequest;
    private bool _hideApprove;
    private bool _modalVisible;
    private string? _psbt;
    private string? _templatePSBT;
    private Modal _channelSpinner;

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal {get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser != null)
        {
            await FetchRequests();
            if (ClaimsPrincipal != null && !ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString()))
            {
                _hideApprove = true;
            }
        }
    }

    private async Task FetchRequests()
    {
        if (LoggedUser != null)
        {
            _channelRequests = await ChannelOperationRequestRepository.GetUnsignedPendingRequestsByUser(LoggedUser.Id);
            _allUserRequest = await ChannelOperationRequestRepository.GetPendingRequestsByUser(LoggedUser.Id);
            _allRequests = new List<ChannelOperationRequest>();
            foreach (var userRequest in _allUserRequest)
            {
                if (_channelRequests.All(req => req.Id != userRequest.Id))
                {
                    _allRequests.Add(userRequest);
                }
            }
        }
    }
    
    private static bool RequestPendingFilter(ChannelOperationRequest req)
    {
        return req.Status.Equals(ChannelOperationRequestStatus.Pending);
    }

    private async Task ShowModal(ChannelOperationRequest channelOperationRequest)
    {
        _selectedRequest = channelOperationRequest;
        _psbt = string.Empty;
        if (_selectedRequest != null) {

            _templatePSBT = (await LightningService.GenerateTemplatePSBT(_selectedRequest))?.ToBase64();

            //TODO Review Saving of PSBT template, but what about concurrency of UTXO?

            _modalVisible = true;

        }
    }

    private async Task HideModal()
    {
        _modalVisible = false;
        _templatePSBT = null;

    }

    private async Task ApproveRequest()
    {
        await HideModal();

        if (_selectedRequest == null || _psbt == null || LoggedUser == null)
        {
            ToastService.ShowError("Error: Not all fields were set");
        }
        else {
            ChannelOperationRequestPSBT psbt = new()
            {
                ChannelOperationRequestId = _selectedRequest.Id,
                PSBT = _psbt,
                UserSignerId = LoggedUser.Id,
                
            };
            var addResult = await ChannelOperationRequestPsbtRepository.AddAsync(psbt);

            if (addResult.Item1)
            {
                ToastService.ShowSuccess("Signature collected");

                _selectedRequest = await ChannelOperationRequestRepository.GetById(_selectedRequest.Id);

                if (_selectedRequest != null 
                    && _selectedRequest.AreAllRequiredSignaturesCollected 
                    && PSBT.TryParse(_psbt, CurrentNetworkHelper.GetCurrentNetwork(), out var parsedPSBT))
                {
                    //TODO We have a I/O issue here, a channel can wait several blocks to be confirmed so the notification will appear in a undetermined time on the UI
                    var failedOpenChannelRequest = false;
                    try
                    {  
                       
                        await _channelSpinner.Show();
                        await LightningService.OpenChannel(_selectedRequest, parsedPSBT);
                    }
                    catch
                    {
                        failedOpenChannelRequest = true;
                    }

                    await _channelSpinner.Close(CloseReason.UserClosing);
                    if (failedOpenChannelRequest)
                    {
                        ToastService.ShowError("Error while requesting to open the channel, please contact a superadmin for troubleshooting");

                    }
                    else
                    {
                        ToastService.ShowSuccess("Channel created");
                    }

                }
            }
            else
            {
                ToastService.ShowSuccess("Error while saving the signature");

            }
        
            await FetchRequests();
            await _channelSpinner.Close(CloseReason.UserClosing);

        }
        
      
    }

    private async Task CopyPSBTToClipboard()
    {
        await ClipboardService.WriteTextAsync(_templatePSBT); 
        ToastService.ShowSuccess("PSBT copied");
    }

}