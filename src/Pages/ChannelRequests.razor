@page "/channel-requests"
@using System.Security.Claims
@using Blazorise.Extensions
@using Quartz
@using Humanizer
@using NBitcoin
@using FundsManager.Jobs
@using FundsManager.Services.Interfaces
@attribute [Authorize(Roles = "FinanceManager, Superadmin, NodeManager")]

<PageTitle>Channel Operation Requests</PageTitle>

@if (_isFinanceManager || _isNodeManager)
{
    <Field Flex="Flex.JustifyContent.Between">
    @if (_isFinanceManager)
    {
        <h3>Requests awaiting my signature</h3>
    }
    else if (_isNodeManager)
    {
        <h3>Requests awaiting signature by a Finance Manager</h3>
    }

    @if (_isNodeManager) // Admin can be node manager and finance manager
    {
        <Button Color="Color.Success" TextColor="TextColor.Light" Clicked="async () => await datagridRef.New()">New</Button>
    }
    </Field>
    <br />
    <DataGrid TItem="ChannelOperationRequest"
              @ref="datagridRef"
              Data="@_channelRequests"
              CustomFilter="@RequestPendingFilter"
              EditMode="DataGridEditMode.Popup"
              ShowPager="true"
              UseValidation="true"
              UseInternalEditing="true"
              ShowPageSizes="true"
              Editable="_isFinanceManager"
              ShowValidationsSummary="true"
              Striped="true"
              PopupClosing="OnChannelRequestRejectModalClosing">
        <PopupTitleTemplate>
            <h2>Create Channel Request</h2>
        </PopupTitleTemplate>
        <ChildContent>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
            <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true"
                            Validator="ValidationRule.IsAlphanumeric">
                <EditTemplate>
                    <Validation Validator="@((ValidatorEventArgs obj) => ValidationHelper.validateDestNode(obj, _selectedDestNode))" @ref="_destNodeValidation">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@_destNodeName" Placeholder="Type the destination Node public key">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Color="Color.Primary" Clicked="@SearchNode">Search</Button>
                            </Addon>
                            <ValidationError/>
                        </Addons>
                        <FieldHelp>@(_selectedDestNode == null ? "Node Not found" : $"Found Node: {_selectedDestNode.Name}") </FieldHelp>
                    </Validation>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true">
                <EditTemplate>
                    <Validation Validator="ValidationRule.IsSelected" @ref="_sourceNodeValidation">
                        <SelectList TItem="Node"
                                    TValue="int"
                                    Data="@_manageableNodes"
                                    TextField="@((item) => item.Name)"
                                    ValueField="@((item) => item.Id)"
                                    SelectedValueChanged="@OnSelectedSourceNode"
                                    DefaultItemText="Choose the source node">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </SelectList>
                    </Validation>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true">
                <DisplayTemplate>
                    @if (context.Wallet != null)
                    {
                        @($"{context.Wallet.Name} ({context.Wallet.MofN}-of-{context.Wallet.Keys.Count})")
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Validation Validator="@ValidationRule.IsSelected" @ref="_walletValidation">
                        @if (context.CellValue == null || (int)context.CellValue == 0)
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_allWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValueChanged="(id) => OnSelectedWallet(id)"
                                        DefaultItemText="Choose the wallet">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </SelectList>
                        }
                        else
                        {
                            <SelectList TItem="Wallet"
                                        TValue="int"
                                        Data="@_allWallets"
                                        TextField="@((item) => item.Name)"
                                        ValueField="@((item) => item.Id)"
                                        SelectedValueChanged="(id) => OnSelectedWallet(id)"
                                        SelectedValue="(int)context.CellValue">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </SelectList>
                        }
                    </Validation>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true" PopupFieldColumnSize="ColumnSize.Is12" Editable="true">
                <DisplayTemplate>
                    @{
                        @($"{context.Amount} BTC")
                        @($" ({Math.Round(PriceConversionHelper.BtcToUsdConversion(context.Amount, _btcPrice), 2)} USD)")
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Validation Validator="ValidationHelper.ValidateChannelCapacity" @ref="_capacityValidation">
                        <NumericPicker TValue="long" @bind-Value="@_amount" CurrencySymbol="SATS ">
                            <Feedback>
                                <ValidationError/>
                            </Feedback>
                        </NumericPicker>
                        <FieldHelp>
                            @{
                                @($"Amount in Satoshis. Minimum 20.000. Current amount: {Math.Round(PriceConversionHelper.SatToUsdConversion(_amount, _btcPrice), 2)} USD")
                            }
                        </FieldHelp>
                    </Validation>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
                <DisplayTemplate>
                    @{
                        if (context.RequestType == OperationRequestType.Open)
                        {
                            var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                            var signaturesRequired = context.Wallet?.MofN ?? 0;
                            @($"{signaturesCollected} out of {signaturesRequired}")
                        }
                        else
                        {
                            @("N/A")
                        }
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true">
                <DisplayTemplate>
                    @context?.Status.Humanize()
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridCommandColumn TItem="ChannelOperationRequest" Caption="Actions" Displayable="true">
                <EditCommandTemplate>
                    <Button Color="Color.Primary" hidden=@(!_isFinanceManager) Clicked="@(() => ShowModal(context.Item))">Approve</Button>
                    @{
                        if (LoggedUser?.Id == context.Item.UserId)
                        {
                            <Button Color="Color.Danger" Clicked="@(() => OpenModalForRejectOrCancelRequest(context.Item, ChannelOperationRequestStatus.Cancelled))">
                                Cancel
                            </Button>
                        }
                        else
                        {
                            <Button Color="Color.Danger" Clicked="@(() => OpenModalForRejectOrCancelRequest(context.Item, ChannelOperationRequestStatus.Rejected))">
                                Reject
                            </Button>
                        }
                    }
                </EditCommandTemplate>
                <NewCommandTemplate>
                    <Button hidden/>
                </NewCommandTemplate>
                <DeleteCommandTemplate>
                    <Button Color="Color.Primary" hidden></Button>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@(async () => await CreateChannelRequest())">Save</Button>
                </SaveCommandTemplate>
            </DataGridCommandColumn>
        </ChildContent>
        <EmptyTemplate>
            <div class="box">
                No records were found.
            </div>
        </EmptyTemplate>
        <LoadingTemplate>
            <div class="box">
                <progress class="progress is-small is-primary" max="100"></progress>
            </div>
        </LoadingTemplate>
    </DataGrid>
}
<br />
<br />
<h3>All Requests</h3>
<br />
<DataGrid TItem="ChannelOperationRequest"
          @ref="@_allRequestsDatagrid"
          Data="@_allRequests"
          Filterable="true"
          ShowPager="true"
          ShowPageSizes="true"
          Striped="true">
    <ChildContent>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Id)" Caption="#" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Capacity" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    @($"{context.Amount} BTC")
                    @($" ({Math.Round(PriceConversionHelper.BtcToUsdConversion(context.Amount, _btcPrice), 2)} USD)")
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.WalletId)" Caption="Signatures Collected" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @{
                    if (context.RequestType == OperationRequestType.Open)
                    {
                        var signaturesCollected = context.NumberOfSignaturesCollected + 1;
                        var signaturesRequired = context.Wallet?.MofN ?? 0;
                        @($"{signaturesCollected} out of {signaturesRequired}")
                    }
                    else
                    {
                        @("N/A");
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status).Humanize(LetterCasing.Sentence)" Caption="Status" Sortable="false" Displayable="true"/>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="Creation Date" Sortable="true">
            <DisplayTemplate>
                @context.CreationDatetime.Humanize()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="Update date" Sortable="true">
            <DisplayTemplate>
                @context.UpdateDatetime.Humanize()
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.TxId)" Caption="Links" Sortable="false" Displayable="true">
            <DisplayTemplate>
                @if (mempoolUrl != null && !context.TxId.IsNullOrEmpty())
                {
                    <a href="@(mempoolUrl + "/tx/" + context.TxId)" target="_blank">See in Mempool</a>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </ChildContent>
    <EmptyTemplate>
        <div class="box">
            No records were found.
        </div>
    </EmptyTemplate>
    <LoadingTemplate>
        <div class="box">
            <progress class="progress is-small is-primary" max="100"></progress>
        </div>
    </LoadingTemplate>
</DataGrid>

<PSBTSign 
    @ref="_psbtSignRef"
    ApproveRequestDelegate="async ()=> await ApproveRequest()"  
    SigHashMode="SigHash.None"
    RequestId="_selectedRequest?.Id" 
    TemplatePsbtString="@_templatePSBTString" 
    SignedPSBT="@_psbt"
/>

<CancelOrRejectPopup
    @ref=@_rejectCancelModalRef
    Title='@(_selectedStatusActionString+" operation: "+_selectedRequest?.Id)'
    Reason="@_cancelOrRejectReason"
    Validator="@RejectReasonValidator"
    OnCancel="@ResetChannelCancelModal"
    OnSubmit="@RejectOrCancelRequest"
/>

<ConfirmationModal
    @ref="_confirmationModal"
    Title="Are you sure?"
    Body="You selected a hot wallet. This means that the system will automatically use the funds in it without the need of manual approval. \nAre you sure you want to perform this operation?"
    OkLabel="Yes, I am sure"
    OnCancel="@CloseConfirmationModal"
    OnSubmit="@SubmitConfirmationModal"
/>

@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IChannelOperationRequestPSBTRepository ChannelOperationRequestPsbtRepository
@inject IToastService ToastService
@inject ILightningService LightningService
@inject ISchedulerFactory  SchedulerFactory
@inject IWalletRepository WalletRepository
@inject INodeRepository NodeRepository
@inject NavigationManager uriHelper;

@code {
    private List<ChannelOperationRequest>? _channelRequests;
    private List<ChannelOperationRequest>? _allRequests;
    private ChannelOperationRequest? _selectedRequest;
    private ChannelOperationRequestStatus _selectedStatus;
    private string? _psbt;
    private string? _templatePSBTString;
    private string? _cancelOrRejectReason;
    private CancelOrRejectPopup _rejectCancelModalRef;
    private string? _selectedStatusActionString;
    private bool _isFinanceManager = false;
    private bool _isNodeManager = false;
    private ConfirmationModal _confirmationModal;

    // New Request integration
    private List<Wallet> _allWallets = new List<Wallet>();
    protected DataGrid<ChannelOperationRequest>? datagridRef;
    protected DataGrid<ChannelOperationRequest>? _allRequestsDatagrid;
    private List<Node>? _manageableNodes;
    private int _selectedSourceNodeId;
    private Node? _selectedDestNode;
    private int _selectedWalletId;
    private string? _destNodeName;
    private long _amount = Constants.MINIMUM_CHANNEL_CAPACITY_SATS;

    //Validation
    private Validation? _walletValidation;
    private Validation? _sourceNodeValidation;
    private Validation? _destNodeValidation;
    private Validation? _capacityValidation;

    private decimal _btcPrice;

    private string? mempoolUrl = Constants.MEMPOOL_ENDPOINT;

    private PSBTSign? _psbtSignRef;

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal {get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser == null) return;
        
        _isFinanceManager = ClaimsPrincipal != null && ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString());
        _isNodeManager = ClaimsPrincipal != null && ClaimsPrincipal.IsInRole(ApplicationUserRole.NodeManager.ToString());

        _btcPrice = PriceConversionHelper.GetBtcToUsdPrice();
        if (_btcPrice == 0)
        {
            ToastService.ShowError("Bitcoin price in USD could not be retrieved.");
        }
        await FetchRequests();
        await LoadData();
    }

    private async Task ResetChannelRequestRejectModal()
    {
        await datagridRef.Edit(null);
        _destNodeName = "";
        _selectedDestNode = null;
        _amount = Constants.MINIMUM_CHANNEL_CAPACITY_SATS;
    }

    private async void ResetChannelCancelModal()
    {
        _cancelOrRejectReason = null;
        await _rejectCancelModalRef.CloseModal();
    }

    private async Task FetchRequests()
    {
        if (LoggedUser == null) return;
        
        _allRequests = await ChannelOperationRequestRepository.GetAll();

        if (_isFinanceManager)
        {
            _channelRequests = await ChannelOperationRequestRepository.GetUnsignedPendingRequestsByUser(LoggedUser.Id);
        }
        else if (_isNodeManager)
        {
            _channelRequests = await ChannelOperationRequestRepository.GetPendingRequests();
        }
        _allRequests = _allRequests.Except(_channelRequests ?? new List<ChannelOperationRequest>()).ToList();
    }

    #region New Request Integration

    private async Task LoadData()
    {
        if (LoggedUser != null)
        {
            _manageableNodes = await NodeRepository.GetAll();
            if (_selectedDestNode != null)
            {
                _manageableNodes = _manageableNodes.Where(node => node.Id != _selectedDestNode.Id).ToList();
            }
            _allWallets = await WalletRepository.GetAvailableWallets();
        }
    }

    private void OnSelectedSourceNode(int nodeId)
    {
        _selectedSourceNodeId = nodeId;

    }

    private void OnSelectedWallet(int walletId)
    {

        _selectedWalletId = walletId;
    }

    private async Task SearchNode()
    {
        _selectedDestNode = null;
        if (!string.IsNullOrWhiteSpace(_destNodeName))
        {
            var foundNode = await LightningService.GetNodeInfo(_destNodeName);
            if (foundNode != null)
            {

                _selectedDestNode = (await NodeRepository.GetByPubkey(_destNodeName));

                //if not found we create it..
                if (_selectedDestNode == null)
                {
                    _selectedDestNode = new Node
                    {
                        Name = foundNode.Alias,
                        PubKey = _destNodeName,

                    };

                    var nodeAddResult = await NodeRepository.AddAsync(_selectedDestNode);

                    if (nodeAddResult.Item1)
                    {
                        _selectedDestNode = await NodeRepository.GetByPubkey(_selectedDestNode.PubKey);
                    }
                }

                // Refresh the list of available source nodes and take out the one selected
                _manageableNodes = await NodeRepository.GetAll();
                _manageableNodes = _manageableNodes.Where(node => node.Id != _selectedDestNode?.Id).ToList();
                _destNodeValidation.Clear();
            }
        }
    }

    private async Task CreateChannelRequest()
    {
        if (LoggedUser == null) return;

        Validation?[] validators = {_destNodeValidation, _sourceNodeValidation, _walletValidation, _capacityValidation};

        if (validators.All(v => v != null && (int)v.Validate() == 1))
        {
            if (_selectedDestNode?.Id != _selectedSourceNodeId)
            {
                var request = new ChannelOperationRequest()
                {
                    SatsAmount = _amount,
                    RequestType = OperationRequestType.Open,
                    Description = "Created by user via Funds Manager",
                    WalletId = _selectedWalletId,
                    Status = ChannelOperationRequestStatus.Pending, //TODO Reject and cancel
                    UserId = LoggedUser.Id,
                    SourceNodeId = _selectedSourceNodeId,
                    DestNodeId = _selectedDestNode?.Id
                };

                var selectedWallet = await WalletRepository.GetById(_selectedWalletId);
                if (selectedWallet.IsHotWallet)
                {
                    _selectedRequest = request;
                    await datagridRef.Edit(null);
                    await _confirmationModal.ShowModal();
                    await ResetChannelRequestRejectModal();
                    return;
                }

                var createChannelResult = await ChannelOperationRequestRepository.AddAsync(request);

                if (createChannelResult.Item1)
                {
                    ToastService.ShowSuccess("Open channel request created!");
                }
                else
                {
                    ToastService.ShowError(createChannelResult.Item2);
                }
            }
            else
            {
                ToastService.ShowError("The Source Node cannot be the same as the Destitation Node");
            }
            await ResetChannelRequestRejectModal();
        }
        await LoadData();
        await FetchRequests(); 
    }

    #endregion


    private static bool RequestPendingFilter(ChannelOperationRequest req)
    {
        return req.Status.Equals(ChannelOperationRequestStatus.Pending) || req.Status == ChannelOperationRequestStatus.PSBTSignaturesPending;
    }

    private Task OnChannelRequestRejectModalClosing(ModalClosingEventArgs args)
    {
        return ResetChannelRequestRejectModal();
    }

    private async void OpenModalForRejectOrCancelRequest(ChannelOperationRequest req, ChannelOperationRequestStatus status)
    {
        _selectedRequest = req;
        _selectedStatus = status;
        switch(_selectedStatus)
        {
            case ChannelOperationRequestStatus.Rejected: _selectedStatusActionString = "Reject"; break;
            case ChannelOperationRequestStatus.Cancelled: _selectedStatusActionString = "Cancel"; break;
        }
        await _rejectCancelModalRef.ShowModal();
    }

    private async Task RejectOrCancelRequest()
    {
        if (_selectedRequest != null)
        {
            _selectedRequest.ClosingReason = _cancelOrRejectReason;
            _selectedRequest.Status = _selectedStatus;
            var jobUpdateResult = ChannelOperationRequestRepository.Update(_selectedRequest);
            if (!jobUpdateResult.Item1)
            {
                ToastService.ShowError("There has been an error when updating the request");
            }
            else
            {
                ToastService.ShowSuccess("Request " + _selectedStatus);
                await FetchRequests();
            }
        }
        else
        {
            ToastService.ShowError("Couldn't fetch data from the request");
        }
        ResetChannelCancelModal();
    }

    private async Task ShowModal(ChannelOperationRequest channelOperationRequest)
    {
        _selectedRequest = channelOperationRequest;
        _psbt = string.Empty;
        if (_selectedRequest != null && !_selectedRequest.AreAllRequiredHumanSignaturesCollected) {
            var (templatePsbt,noUtxosAvailable) = (await LightningService.GenerateTemplatePSBT(_selectedRequest));
            if (templatePsbt != null)
            {
                _templatePSBTString = templatePsbt.ToBase64();
                await _psbtSignRef.ShowModal();

            }
            else
            {
                if (noUtxosAvailable)
                {
                    ToastService.ShowError("No UTXOs found for this wallet, please wait for other requests to be confirmed or fund the wallet with more UTXOs");

                }
                else
                {
                    ToastService.ShowError("Something went wrong");

                }
            }

        }
    }

    private async Task ApproveRequest()
    {
        _psbtSignRef?.HideModal();

        if (_selectedRequest == null || string.IsNullOrEmpty(_psbtSignRef?.SignedPSBT) || LoggedUser == null)
        {
            ToastService.ShowError("Error: Not all fields were set");
        }
        else {
            ChannelOperationRequestPSBT channelOperationRequestPsbt = new()
            {
                ChannelOperationRequestId = _selectedRequest.Id,
                PSBT = _psbtSignRef.SignedPSBT,
                UserSignerId = LoggedUser.Id,

            };
            var addResult = await ChannelOperationRequestPsbtRepository.AddAsync(channelOperationRequestPsbt);

            if (addResult.Item1)
            {
                ToastService.ShowSuccess("Signature collected");

                _selectedRequest = await ChannelOperationRequestRepository.GetById(_selectedRequest.Id);

                if (_selectedRequest != null
                    && _selectedRequest.AreAllRequiredHumanSignaturesCollected)
                {
                    await CreateJob();
                }
                else
                {
                    ToastService.ShowError("Invalid PSBT");

                }
            }
            else
            {
                ToastService.ShowError("Error while saving the signature");

            }

            await FetchRequests();
            await _psbtSignRef.HideModal();
            StateHasChanged();

        }
    

    }

    private bool IsStatusCancellable(ChannelOperationRequestStatus status)
    {
        return status is ChannelOperationRequestStatus.Pending
            or ChannelOperationRequestStatus.Approved;
    }

    private void RejectReasonValidator(ValidatorEventArgs e)
    {
        if (_selectedStatus == ChannelOperationRequestStatus.Rejected)
        {
            ValidationRule.IsNotEmpty(e);
        }
        else
        {
            ValidationRule.None(e);
        }
    }

    private async Task CloseConfirmationModal()
    {
        await _confirmationModal.CloseModal();
    }

    private async Task SubmitConfirmationModal()
    {
        if (_selectedRequest != null)
        {
            var createChannelResult = await ChannelOperationRequestRepository.AddAsync(_selectedRequest);
            if (createChannelResult.Item1)
            {
                ToastService.ShowSuccess("Open channel request created!");
            }
            else
            {
                ToastService.ShowError(createChannelResult.Item2);
                await _confirmationModal.CloseModal();
                return;
            }

            var (templatePsbt, noUtxosAvailable) = (await LightningService.GenerateTemplatePSBT(_selectedRequest));
            if (templatePsbt == null)
            {
                if (noUtxosAvailable)
                {
                    ToastService.ShowError("No UTXOs found for this wallet, please wait for other requests to be confirmed or fund the wallet with more UTXOs");
                }
                else
                {
                    ToastService.ShowError("Something went wrong");
                }
                _selectedRequest.Status = ChannelOperationRequestStatus.Failed;
                ChannelOperationRequestRepository.Update(_selectedRequest);
                await _confirmationModal.CloseModal();
                await FetchRequests();
                StateHasChanged();
                return;
            }

            var channelOperationRequestPSBT = new ChannelOperationRequestPSBT()
            {
                ChannelOperationRequestId = _selectedRequest.Id,
                PSBT = templatePsbt.ToBase64(),
                UserSignerId = null,
            };
            var addResult = await ChannelOperationRequestPsbtRepository.AddAsync(channelOperationRequestPSBT);
            if (addResult.Item1)
            {
                ToastService.ShowSuccess("Signature collected");

                _selectedRequest = await ChannelOperationRequestRepository.GetById(_selectedRequest.Id);

                if (_selectedRequest != null
                    && _selectedRequest.AreAllRequiredHumanSignaturesCollected)
                {
                    await CreateJob();
                }
                else
                {
                    ToastService.ShowError("Invalid PSBT");
                }
            }
            else
            {
                ToastService.ShowError("Error while saving the signature");
            }
           
            await FetchRequests();
            _allRequestsDatagrid.Dispose();
            StateHasChanged();
            _confirmationModal.CloseModal();
        }
    }

    private async Task CreateJob()
    {
        try
        {
            //TODO Async notifications when the channel has opened -> event / notifications system
            IScheduler scheduler = await SchedulerFactory.GetScheduler();

            var map = new JobDataMap();
            map.Put("openRequestId", _selectedRequest.Id);

            var retryList = RetriableJob.ParseRetryListFromString(Constants.JOB_RETRY_INTERVAL_LIST_IN_MINUTES);
            var job = RetriableJob.Create<ChannelOpenJob>(map, _selectedRequest.Id.ToString(), retryList);
            await scheduler.ScheduleJob(job.Job, job.Trigger);

            // TODO: Check job id
            _selectedRequest.JobId = job.Job.Key.ToString();

            var jobUpdateResult = ChannelOperationRequestRepository.Update(_selectedRequest);
            ToastService.ShowSuccess("Channel opening job created");
        }
        catch
        {
            ToastService.ShowError("Error while requesting to open the channel, please contact a superadmin for troubleshooting");
        }
    }

    }