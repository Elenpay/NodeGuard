@page "/create-channel"
@using NBitcoin
@attribute [Authorize(Roles = "NodeManager, Superadmin")]

<PageTitle>Create Channel Request</PageTitle>

<h3>Submit channel operation request</h3>
<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <Form>
            <Field>
                <Validation Validator="@ValidationRule.IsAlphanumeric">
                    <Addons>
                        <Addon AddonType="AddonType.Body">
                            <TextEdit @bind-Text="@_destNodeName" Placeholder="Type the destination Node public key" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Primary" Clicked="@SearchNode">Search</Button>
                        </Addon>
                    </Addons>
                    <FieldHelp>@(_selectedDestNode==null ? "Node Not found" : $"Found Node: {_selectedDestNode.Name}") </FieldHelp>
                </Validation>
            </Field>
            <Field>
                <FieldLabel>Source node</FieldLabel>
                <SelectList TItem="Node"
                            TValue="int"
                            Data="@_manageableNodes"
                            TextField="@((item) => item.Name)"
                            ValueField="@((item) => item.Id)"
                            SelectedValueChanged="@OnSelectedSourceNode"
                            DefaultItemText="Choose the source node" />
            </Field>
            <Field>
                <FieldLabel>
                    Source wallet of funds
                </FieldLabel>
                <SelectList TItem="Wallet"
                            TValue="int"
                            Data="@_allWallets"
                            TextField="@((item) => item.Name)"
                            ValueField="@((item) => item.Id)"
                            SelectedValueChanged="@OnSelectedWallet"
                            DefaultItemText="Choose the wallet as the source of funds" />
            </Field>
            <Field>
                <FieldLabel>Channel Amount (Satoshis)</FieldLabel>
                <NumericEdit TValue="long" Min="20000L" @bind-Value="@_amount" />
            </Field>
            <br />
            <br />
            <Fields>
                <Field>
                    <Button Flex="Flex.JustifyContent.End" Disabled=@(_selectedDestNode == null) PreventDefaultOnSubmit Color="Color.Primary" Clicked="@CreateChannelRequest">Submit request</Button>
                </Field>
            </Fields>
        </Form>
    </Column>
</Row>

@inject INodeRepository NodeRepository
@inject IWalletRepository WalletRepository
@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject ILightningService LightningService
@code{
    private string? _destNodeName;
    private long _amount = 20000;
    private List<Node>? _manageableNodes;
    private List<Wallet>? _allWallets;
    private int _selectedSourceNodeId;
    private Node? _selectedDestNode;
    private int _selectedWalletId;
    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser == null)
        {
            NavigationManager.NavigateTo("error");
        }
        else
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        if (LoggedUser != null) _manageableNodes = await NodeRepository.GetAllManagedByUser(LoggedUser.Id);
        _allWallets = await WalletRepository.GetAvailableWallets();
    }

    private async Task SearchNode()
    {
        _selectedDestNode = null;
        if (!string.IsNullOrWhiteSpace(_destNodeName))
        {
            var foundNode = await LightningService.GetNodeInfo(_destNodeName);
            if (foundNode != null)
            {

                _selectedDestNode = (await NodeRepository.GetByPubkey(_destNodeName));
                
                //if not found we create it..
                if (_selectedDestNode == null)
                {
                    _selectedDestNode =  new Node{
                        Name = foundNode.Alias,
                        PubKey = _destNodeName,

                    };

                    var nodeAddResult = await NodeRepository.AddAsync(_selectedDestNode);

                    if (nodeAddResult.Item1)
                    {
                        _selectedDestNode = await NodeRepository.GetByPubkey(_selectedDestNode.PubKey);
                    }
                }

                // Refresh the list of available source nodes and take out the one selected
                _manageableNodes = await NodeRepository.GetAllManagedByUser(LoggedUser?.Id!);
                _manageableNodes = _manageableNodes.Where(node => node.Id != _selectedDestNode.Id).ToList();
            }
        }
    }

    private void OnSelectedSourceNode(int nodeId)
    {
        _selectedSourceNodeId = nodeId;

    }
    private void OnSelectedWallet(int walletId)
    {
        _selectedWalletId = walletId;
    }
    
    private async Task CreateChannelRequest()
    {
        // TODO Sanitise inputs
        if (_amount != null && _amount > 0 && _selectedWalletId > 0 && LoggedUser != null &&
            _selectedSourceNodeId > 0 && _selectedDestNode != null)
        {
            if (_selectedDestNode.Id != _selectedSourceNodeId)
            {
                ChannelOperationRequest request = new()
                {
                    SatsAmount = _amount,
                    RequestType = OperationRequestType.Open,
                    Description = "Created by user via Funds Manager",
                    WalletId = _selectedWalletId,
                    Status = ChannelOperationRequestStatus.Pending, //TODO Reject and cancel
                    UserId = LoggedUser.Id,
                    SourceNodeId = _selectedSourceNodeId,
                    DestNodeId = _selectedDestNode.Id
                };

                var createChannelResult = await ChannelOperationRequestRepository.AddAsync(request);
                if (createChannelResult.Item1)
                {
                    ToastService.ShowSuccess("Open channel request created!");
                }
                else
                {
                    ToastService.ShowError("Open channel request failed!");
                }

            }
            else
            {
                ToastService.ShowError("The Source Node cannot be the same as the Destitation Node");
            }
        }
        else
        {
            ToastService.ShowError("Some fields were not properly filled");
        }

        await LoadData();

        await ClearData();

    }

    private async Task ClearData()
    {
        _selectedWalletId = 0;
        if (_manageableNodes != null) 
            _selectedSourceNodeId = _manageableNodes.FirstOrDefault().Id;
        _selectedDestNode = null;
        _amount = 20_000L;
        
    }

}
