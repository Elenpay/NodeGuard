@page "/create-channel"
@using NBitcoin

<PageTitle>Create Channel Request</PageTitle>

<h1>Create Channel Request</h1>
<p></p>
<Form>
    <Fields Flex="Flex.JustifyContent.Center">
        <Field>
            <Validation Validator="@ValidationRule.IsAlphanumeric">
                <FieldLabel>Destination Node</FieldLabel>
                <TextEdit @bind-Text="@_destNodeName">
                    <FieldHelp>@(_selectedDestNode==null ? "Node Not found" : $"Found Node: {_selectedDestNode.Name} - {_selectedDestNode.Description}") </FieldHelp>
                </TextEdit>
            </Validation>
        </Field>
    </Fields>
    <Fields>
        <Field Flex="Flex.JustifyContent.End">
             <Button Color="Color.Primary" Clicked="@SearchNode">Search</Button>
        </Field>
    </Fields>
    <br />
    <br />
    <Fields>
        <Field>
            <FieldLabel>Source Node</FieldLabel>
            <DropdownList TItem="Node" TValue="Node"
                          Data="@_manageableNodes"
                          TextField="@((item) => item.Name)"
                          ValueField="@((item) => item)"
                          @bind-SelectedValue="@_selectedSourceNode"
                          Color="Color.Primary"
                          MaxMenuHeight="200px">
                @(_selectedSourceNode == null ? "Select Node" : _selectedSourceNode.Name)
            </DropdownList>
        </Field>
        <Field>
            <FieldLabel>Source of the funds</FieldLabel>
            <DropdownList TItem="Wallet" TValue="Wallet"
                          Data="@_allWallets"
                          TextField="@((item) => item.Name)"
                          ValueField="@((item) => item)"
                          @bind-SelectedValue="@_selectedWallet"
                          Color="Color.Primary"
                          MaxMenuHeight="200px">
                @(_selectedWallet == null ? "Select Wallet" : _selectedWallet.Name)
            </DropdownList>
        </Field>
    </Fields>
    <Fields>
        <Field>
            <FieldLabel>Channel Amount</FieldLabel>
            <NumericEdit TValue="long?" @bind-Value=@_amount placeholder="amount in Satoshis"/>
        </Field>
    </Fields>
    <br />
    <br />
    <Fields>
        <Field>
            <Button Block Disabled=@(_selectedDestNode == null) Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@CreateChannelRequest">Create Channel</Button>
        </Field>
    </Fields>
</Form>
@inject INodeRepository NodeRepository
@inject IWalletRepository WalletRepository
@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IToastService ToastService;
@inject NavigationManager NavigationManager
@code{
    private string? _destNodeName;
    private long? _amount;
    private List<Node>? _manageableNodes;
    private List<Wallet>? _allWallets;
    private Node? _selectedSourceNode;
    private Node? _selectedDestNode;
    private Wallet? _selectedWallet;
    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser == null)
        {
            NavigationManager.NavigateTo("error");
        }
        _manageableNodes = await NodeRepository.GetAllManaged();
        _allWallets = await WalletRepository.GetAll();
        await base.OnInitializedAsync();
    }

    private async Task SearchNode()
    {
        _selectedDestNode = null;
        if (_destNodeName != null)
        {
            Node? foundNode = await NodeRepository.GetByPubkey(_destNodeName);
            if (foundNode != null)
            {
                _selectedDestNode = foundNode;
            }
        }
    }

    private async Task CreateChannelRequest()
    {
        // TODO Sanitise inputs
        ChannelOperationRequest request = new();
        if (_amount != null && _selectedWallet != null && LoggedUser != null &&
            _selectedSourceNode != null && _selectedDestNode != null)
        {
            request.SatsAmount = new Money(_amount.Value, MoneyUnit.BTC).Satoshi;
            request.RequestType = OperationRequestType.Open;
            request.Description = "Created by user via Funds Manager";
            request.WalletId = _selectedWallet.Id;
            request.Status = ChannelOperationRequestStatus.Pending;
            request.UserId = LoggedUser.Id;
            request.SourceNodeId = _selectedSourceNode.Id;
            request.DestNodeId = _selectedDestNode.Id;
            
            var createChannelResult = await ChannelOperationRequestRepository.AddAsync(request);
            if (createChannelResult.Item1)
            {
                ToastService.ShowSuccess("Open channel request created!");
            }
            else
            {
                ToastService.ShowError("Open channel request failed!");
            }
        }
        else
        {
            ToastService.ShowError("Some fields were not properly filled");

        }
    }
}
