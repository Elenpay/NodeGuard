/*
 * NodeGuard
 * Copyright (C) 2023  ClovrLabs
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

@page "/setup-internal-wallet"
@using System.Text.RegularExpressions

<h3>Internal wallet setup</h3>
@attribute [Authorize(Roles = "Superadmin")]

<Row>
    <Column Flex="Flex.AlignContent.Center.JustifyContent.Center">
        @if (_isRemoteSignerModeEnabled && _internalWallet != null && (string.IsNullOrWhiteSpace(_internalWallet.XPUB) || string.IsNullOrWhiteSpace(_internalWallet.MasterFingerprint)))
        {
            <Fields>
                <Validations @ref="validationsRef">
                    <Column ColumnSize="ColumnSize.Is12" >
                        <Validation AsyncValidator="ValidateXPUB">
                            <Field>
                                <FieldLabel>XPUB</FieldLabel>
                                <FieldHelp>Paste a XPUB of a internal wallet generated in a secure way by your team</FieldHelp>
                                <FieldBody>
                                    <MemoEdit @bind-Text="@_externalWalletXPUB" Rows="4">
                                        <Feedback>
                                            <ValidationNone>Enter a valid xpub</ValidationNone>
                                            <ValidationSuccess>Valid XPUB</ValidationSuccess>
                                            <ValidationError>Invalid XPUB</ValidationError>
                                        </Feedback>
                                    </MemoEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is12" >
                        <Validation Validator="ValidationRule.IsNotEmpty">

                            <Field>
                                <FieldLabel>Master fingerprint</FieldLabel>
                                <FieldHelp>Master HD Fingerprint of the wallet related to this XPUB</FieldHelp>
                                <FieldBody>
                                    <TextEdit @bind-Text="@_externalWalletMasterFingerprint">
                                        <Feedback>
                                            <ValidationNone>Enter a valid fingerprint</ValidationNone>
                                            <ValidationSuccess>Valid fingerprint</ValidationSuccess>
                                            <ValidationError>Invalid fingerprint</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                    <Button Color="Color.Info" Clicked="Save">Save</Button>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Column>
                </Validations>
            </Fields>
        }
        else
        {
            @if (_internalWallet != null)
            {
                <Field>
                    <FieldLabel>Internal wallet seed phrase (Mnemonic)</FieldLabel>
                    <FieldHelp>
                        Please write down the seed phrase and store it securely. You will need it to recover your internal wallet.
                    </FieldHelp>
                    <FieldBody>
                        <MemoEdit @bind-Text="@_internalWallet.MnemonicString" Rows="10">

                        </MemoEdit>
                    </FieldBody>
                </Field>
            }
            else
            {
                <p> Error, the internal wallet is not generated</p>
            }
        }
    </Column>

</Row>

@code {

    [Inject]
    public IInternalWalletRepository InternalWalletRepository { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IToastService ToastService { get; set; }

    private InternalWallet? _internalWallet;

    private bool _isRemoteSignerModeEnabled = false;
    private string? _externalWalletMasterFingerprint;

    private string? _externalWalletXPUB;
    private Validations validationsRef;

    protected override async Task OnInitializedAsync()
    {
        _isRemoteSignerModeEnabled = Environment.GetEnvironmentVariable("ENABLE_REMOTE_SIGNER") != null;
    //Get Current internal wallet
        _internalWallet = await InternalWalletRepository.GetCurrentInternalWallet();

    //If internal wallet is generated and has xpub or mnemonic then redirect to main page
        var isIWalletWellFormed = !string.IsNullOrWhiteSpace(_internalWallet.XPUB) && !string.IsNullOrWhiteSpace(_internalWallet.MasterFingerprint);
        if (_internalWallet != null && (isIWalletWellFormed|| !string.IsNullOrWhiteSpace(_internalWallet.MnemonicString)))
        {
            NavigationManager.NavigateTo("/");
        }

    //If there is no internal wallet, create one only if the remote signer is not enabled
        if (_internalWallet == null)
        {
            if (_isRemoteSignerModeEnabled)
            {
                _internalWallet = await InternalWalletRepository.GenerateNewInternalWallet(generateReadOnlyWallet: true);
            }
            else
            {
                _internalWallet = await InternalWalletRepository.GenerateNewInternalWallet(generateReadOnlyWallet: false);
            }

            StateHasChanged();
        }
    }

    private async Task ValidateXPUB(ValidatorEventArgs arg1, CancellationToken arg2)
    {
        arg1.Status = ValidationStatus.Success;


        if (arg1.Value != null && !ValidationHelper.ValidateXPUB(arg1.Value.ToString()))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Invalid XPUB";
        }
        else if (string.IsNullOrWhiteSpace(arg1.Value?.ToString()))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "XPUB is required";
        }
    }

    private async Task Save()
    {
        if (await validationsRef.ValidateAll())
        {
            _internalWallet.XPUB = _externalWalletXPUB;
            _internalWallet.MasterFingerprint = _externalWalletMasterFingerprint;

            var updateResult = InternalWalletRepository.Update(_internalWallet);
            if (updateResult.Item1)
            {
                ToastService.ShowSuccess("Internal wallet setup completed");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService.ShowError("Something went wrong");
            }
        }
    }

}