@page "/keys"
@using System.Security.Claims
@using Humanizer

@inject IKeyRepository KeyRepository
@inject IToastService ToastService
<h3 class="custom-primary">My extended public keys</h3>

@attribute [Authorize(Roles = "FinanceManager")]

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Key"
                  Data="@userKeys"
                  Editable="true"
                  EditMode="DataGridEditMode.Popup"
                  Responsive="true"
                  ResizeMode="TableResizeMode.Columns"
                  UseInternalEditing="true"
                  UseValidation="true"
                  RowInserted="OnRowInserted"
                  RowRemoving="OnRowRemoving"
                  RowUpdated="OnRowUpdated"
                  NewItemDefaultSetter="NewItemDefaultSetter">
            
            <PopupTitleTemplate>
                <h2>@(context.EditState) keys</h2>
            </PopupTitleTemplate>
            <ChildContent>
                <DataGridCommandColumn TItem="Key">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" TextColor="TextColor.Light" Clicked="@context.Clicked" Block>New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Block>Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        @if (context.Item.Wallets != null && !context.Item.Wallets.Any())
                        {
                            <Button Color="Color.Danger" Clicked="@context.Clicked" Size="Size.Small" Block>Delete</Button>

                        }
                    </DeleteCommandTemplate>

                </DataGridCommandColumn>
                <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.Name)" Caption="@nameof(Key.Name)" Sortable="false" Validator="@ValidationHelper.ValidateName"/>
                <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.Description)" Caption="@nameof(Key.Description)" Sortable="false"/>
                <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.IsArchived)" Caption="Archived" Sortable="false"/>
                <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.IsCompromised)" Caption="@nameof(Key.IsCompromised).Humanize(LetterCasing.Sentence)" Sortable="false"/>
                @if (Constants.ENABLE_HW_SUPPORT)
                {
                    <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.Path)" Caption="@nameof(Key.Path)" Sortable="false"/>
                    <DataGridColumn TItem="Key" Editable="true" Field="@nameof(Key.MasterFingerprint)" Caption="@nameof(Key.MasterFingerprint).Humanize(LetterCasing.Sentence)" Sortable="false"/>
                }
                <DataGridColumn TItem="Key" CellsEditableOnNewCommand="true" AsyncValidator="ValidateXPUB" CellsEditableOnEditCommand="false" Editable="true" Field="@nameof(Key.XPUB)" Caption="@nameof(Key.XPUB).Humanize(LetterCasing.Sentence)" Sortable="false" Validator="@ValidationHelper.ValidateXPUB">
                    <DisplayTemplate>
                        @if (!string.IsNullOrWhiteSpace(context.XPUB) && context.XPUB.Length > 40)
                        {
                            @StringHelper.TruncateHeadAndTail(context.XPUB, 6);
                            <span>&nbsp</span>
                            <Button Color="Color.Primary" Clicked="@(() => CopyStrToClipboard(context.XPUB))" Size="Size.Small" Outline>
                                <i class="oi oi-clipboard"></i>
                            </Button>
                        }
                        else
                        {
                            <p>Invalid xpub</p>
                        }

                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Key" Field="@nameof(Key.CreationDatetime)" Caption="@nameof(Key.CreationDatetime).Humanize(LetterCasing.Sentence)" Sortable="false"/>
                <DataGridColumn TItem="Key" Field="@nameof(Key.UpdateDatetime)" Caption="@nameof(Key.UpdateDatetime).Humanize(LetterCasing.Sentence)" Sortable="false"/>
            </ChildContent>
        </DataGrid>
    </Column>
</Row>
@code {

    [CascadingParameter]
    private ApplicationUser? _loggedUser { get; set; }


    [CascadingParameter]
    private ClaimsPrincipal _claimsPrincipal { get; set; }

    private List<Key> userKeys { get; set; } = new List<Key>();

    protected override async Task OnInitializedAsync()
    {
        if (_loggedUser != null)
        {
            await GetData();
        }


    }

    private async Task GetData()
    {
        
        userKeys = await KeyRepository.GetUserKeys(_loggedUser);
    }


    private async Task OnRowInserted(SavedRowItem<Key, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var addResult = await KeyRepository.AddAsync(arg.Item);

        
        if (addResult.Item1)
        {
            ToastService.ShowSuccess("Success");
            await GetData();
        }
        else
        {
            ToastService.ShowError("Something went wrong");
            userKeys.Remove(arg.Item);

        }


    }

    private void NewItemDefaultSetter(Key obj)
    {

        obj.UserId = _loggedUser.Id;

    }

    private async Task OnRowRemoving(CancellableRowChange<Key> arg)
    {
        if (arg.Item != null)
        {

            var (result, message) = KeyRepository.Remove(arg.Item);

            if (!result)
            {

                arg.Cancel = true;
                ToastService.ShowError("Something went wrong");
            }
            else
            {
                ToastService.ShowSuccess("Success");
                await GetData();
            }
        }
    }
               

    private async Task OnRowUpdated(SavedRowItem<Key, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var updateResult = KeyRepository.Update(arg.Item);

        
        if (updateResult.Item1)
        {
            ToastService.ShowSuccess("Success");
        }
        else
        {
            ToastService.ShowError("Something went wrong");


        }

        await GetData();
    }

    private async Task CopyStrToClipboard(string arg)
    {
        await ClipboardService.WriteTextAsync(arg); 
        ToastService.ShowSuccess("Text copied");
    }

    private async Task ValidateXPUB(ValidatorEventArgs arg1, CancellationToken arg2)
    {
        arg1.Status = ValidationStatus.Success;


        if (arg1.Value != null && !ValidationHelper.ValidateXPUB(arg1.Value.ToString()))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Invalid XPUB";
        }
        else if (string.IsNullOrWhiteSpace(arg1.Value?.ToString()))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "XPUB is required";
        }
    }

}