@page "/channeltest"

@using NBitcoin
@using NBXplorer
@using NSubstitute
@using Transaction = NBitcoin.Transaction
@inject INodeRepository NodeRepository
@inject IWalletRepository WalletRepository
@inject ILightningService LightningService
@inject IChannelOperationRequestRepository ChannelOperationRequestRepository
@inject IInternalWalletRepository InternalWalletRepository
@inject IApplicationUserRepository ApplicationUserRepository
@inject IToastService toastService
@inject IChannelRepository ChannelRepository

<PageTitle>Channel testing</PageTitle>

<h3>Channel open tester</h3>

    <Field>
        <FieldLabel>Source node</FieldLabel>
        <SelectList TItem="Node"
                    TValue="int"
                    Data="@_managedNodes"
                    TextField="@((item) => item.Name)"
                    ValueField="@((item) => item.Id)"
                    SelectedValueChanged="@OnSelectedSourceNode"
                    DefaultItemText="Choose the source node" />
    </Field>
    <Field>
        <FieldLabel>
            Destination Node
        </FieldLabel>
        <SelectList TItem="Node"
                    TValue="int"
                    Data="@_destinationNodes"
                    TextField="@((item) => item.Name)"
                    ValueField="@((item) => item.Id)"
                    SelectedValueChanged="@OnSelectedDestinationNode"
                    DefaultItemText="Choose the destination node" />
    </Field>
    <Field>
        <FieldLabel>
            Source wallet
        </FieldLabel>
        <SelectList TItem="Wallet"
                    TValue="int"
                    Data="@_wallets"
                    TextField="@((item) => item.Name)"
                    ValueField="@((item) => item.Id)"
                    SelectedValueChanged="@OnSelectedWallet"
                    DefaultItemText="Choose the source wallet" />
    </Field>
    <Field>
        <FieldLabel>
            Channel capacity (Sats)
        </FieldLabel>
        <NumericEdit TValue="long" @bind-Value="_satsAmount"></NumericEdit>
    </Field>
    <Field>
        <button class="btn btn-primary" @onclick="GeneratePSBT">Generate PSBT</button>
    </Field>
    <Field>
        <FieldLabel>
            Template PSBT
        </FieldLabel>
        <MemoEdit @bind-Text="@templatePSBTString" Rows="3"></MemoEdit>
    </Field>
    <Field>
        <FieldLabel>Signed with Key 1 PSBT</FieldLabel>
        <MemoEdit Text="@_psbtSign1String" TextChanged="OnPSBT1TextChanged" Rows="4"></MemoEdit>
    </Field>

    <Field >
        <FieldLabel>Signed with Key 2 PSBT</FieldLabel>
        <MemoEdit Text="@_psbtSign2String" TextChanged="OnPSBT2TextChanged" Rows="4"></MemoEdit>
    </Field>
    
    <Field>
        <FieldLabel>Combine PSBT</FieldLabel>
        <button class="btn btn-primary" @onclick="CombinePSBT">Combine</button>

    </Field>
    <Field>
        <FieldLabel>Combined PSBT</FieldLabel>
        <MemoEdit Text="@_combinedPsbtString" TextChanged="OnCombinedPSBTChanged" Rows="6"></MemoEdit>
    </Field>
   
    <Field>
        <button class="btn btn-primary" @onclick="OpenChannelRequest">Open channel</button>
        <button class="btn btn-danger" @onclick="CloseChannelRequest">Close channel (last opened)</button>
    </Field>

@code {

    private PSBT? templatePSBT;
    private string? templatePSBTString;

    private PSBT? _psbtSign1;
    private string _psbtSign1String;

    private PSBT? _psbtSign2;
    private string _psbtSign2String;

    private PSBT? _combinedPsbt;
    private string? _combinedPsbtString;

    private int? _lastChannelId;

    private List<Node> _managedNodes;
    private List<Node> _destinationNodes;

    private Node? _sourceNode;
    private Node? _destinationNode;

    private List<Wallet> _wallets  = new List<Wallet>();
    private Wallet? _selectedWallet;

    private long _satsAmount = 20000;

    protected override async Task OnInitializedAsync()
    {
        var nodes = await NodeRepository.GetAll();

        _managedNodes = nodes.Where(x => x.IsManaged).ToList();
        _destinationNodes = nodes;


        _wallets = (await WalletRepository.GetAll());
        _selectedWallet = _wallets.FirstOrDefault();
    }

    private async Task OpenChannelRequest()
    {
        var nodes = await NodeRepository.GetAll();

             
        if (_sourceNode != null && _destinationNode != null)
        {
            var channelOperationRequest = await ChannelOperationRequest(_selectedWallet, _sourceNode, _destinationNode);

            if (_combinedPsbt != null)
            {
                //Hack to prevent PK issue -> this would not happen on a normal UI
                var temp = channelOperationRequest.Wallet;

                channelOperationRequest.Wallet = null;


                var result = await ChannelOperationRequestRepository.AddAsync(channelOperationRequest);

                channelOperationRequest = await ChannelOperationRequestRepository.GetById(channelOperationRequest.Id);
                if (result.Item1)
                {
                    var channelresult = false;
                    await LightningService.OpenChannel(channelOperationRequest, _combinedPsbt);

                    if (channelresult)
                    {
                        toastService.ShowSuccess("Channel negotiation submitted!");
                        _lastChannelId = channelOperationRequest.ChannelId;
                    }
                    else
                    {
                        toastService.ShowError("Channel negotiation failed!");
                    }


                }


            }
        }
    }

    private async Task<ChannelOperationRequest> ChannelOperationRequest(Wallet defaultWallet, Node? source, Node? destination)
    {
        var user = (await ApplicationUserRepository.GetAll()).First();
        var channelOperationRequest = new ChannelOperationRequest
            {
                SatsAmount = _satsAmount,
                RequestType = OperationRequestType.Open,
                Status = ChannelOperationRequestStatus.Pending,
                Wallet = defaultWallet,
                WalletId = defaultWallet.Id,

                DestNodeId = source.Id,
                SourceNodeId = destination.Id,
                UserId = user.Id,
                //User = user
            };
        return channelOperationRequest;
    }

    private async Task GeneratePSBT()
    {
        var nbXplorerNetwork = Network.RegTest;
        var provider = new NBXplorerNetworkProvider(nbXplorerNetwork.ChainName);


        var channelOperationRequest = new ChannelOperationRequest
            {
                SatsAmount = _satsAmount,
                RequestType = OperationRequestType.Open,
                WalletId = _selectedWallet.Id,
                Wallet = _selectedWallet,
                Status = ChannelOperationRequestStatus.Pending,
            };


        templatePSBT = await LightningService.GenerateTemplatePSBT(channelOperationRequest);

        if (templatePSBT == null)
        {
            toastService.ShowError("Error while generating PSBT, check console");
        }
        else
        {
            templatePSBTString = templatePSBT.ToBase64();
        }
        

    }

    private async Task CombinePSBT()
    {
        if (_psbtSign1 != null && _psbtSign2 != null)
        {
            _combinedPsbt = _psbtSign1.Combine(_psbtSign2);
            _combinedPsbtString = _combinedPsbt.ToBase64();

            toastService.ShowSuccess("PSBT Combined");

        }
    }

    private async Task OnPSBT1TextChanged(string arg)
    {
        if (!string.IsNullOrEmpty(arg))
        {
            if (PSBT.TryParse(arg, Network.RegTest, out _psbtSign1))
            {

            }
            else if (Transaction.TryParse(arg, Network.RegTest, out var tx))
            {
                _psbtSign1 = tx.CreatePSBT(Network.RegTest);

            }
            _psbtSign1String = arg;
            StateHasChanged();
        }
    }
    private async Task OnPSBT2TextChanged(string arg)
    {
        if (!string.IsNullOrEmpty(arg))
        {
            if (PSBT.TryParse(arg, Network.RegTest, out _psbtSign2))
            {

            }
            else if (Transaction.TryParse(arg, Network.RegTest, out var tx))
            {
                _psbtSign2 = tx.CreatePSBT(Network.RegTest);

            }

            _psbtSign2String = arg;
            StateHasChanged();
        }
    }

    private async Task OnCombinedPSBTChanged(string arg)
    {
        _combinedPsbtString = arg;

        if (!string.IsNullOrEmpty(arg))
        {
            if (PSBT.TryParse(arg, Network.RegTest, out _combinedPsbt))
            {

            }



        }
    }

    private async Task CloseChannelRequest()
    {
        var nodes = await NodeRepository.GetAll();

        var alice = nodes.FirstOrDefault(x => x.Name == "Alice");
        var user = (await ApplicationUserRepository.GetAll()).First();

        Channel? channel = null;
        if (_lastChannelId != null)
            channel = await ChannelRepository.GetById(_lastChannelId.Value);

        if (channel != null)
        {
            var defaultWallet = (await WalletRepository.GetAll()).First();

            var channelOperationRequest = new ChannelOperationRequest
                {
                    AmountCryptoUnit = MoneyUnit.Satoshi,
                    ChannelId = _lastChannelId,
                    CreationDatetime = DateTimeOffset.Now,
                    RequestType = OperationRequestType.Close,
                    SourceNodeId = alice.Id,
                    Status = ChannelOperationRequestStatus.Pending,
                    UserId = user.Id,
                    WalletId = defaultWallet.Id,

                };
            var result = await ChannelOperationRequestRepository.AddAsync(channelOperationRequest);

            channelOperationRequest.SourceNode = alice;

            if (result.Item1)
            {
                var channelresult = await LightningService.CloseChannel(channelOperationRequest, false);

                if (channelresult)
                {
                    toastService.ShowSuccess("Channel closed!");
                }
                else
                {
                    toastService.ShowError("Channel closing failed!");
                }
            }

        }



    }


    private async Task OnSelectedSourceNode(int arg)
    {
        _sourceNode = _managedNodes.FirstOrDefault(x => x.Id == arg);

    }
    private async Task OnSelectedDestinationNode(int arg)
    {
        _destinationNode = _destinationNodes.FirstOrDefault(x => x.Id == arg);

    }
     

    private async Task OnSelectedWallet(int arg)
    {
        _selectedWallet = _wallets.FirstOrDefault(x => x.Id == arg);
    }

}


