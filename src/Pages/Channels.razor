@page "/channels"
@using System.Security.Claims
@using Humanizer
@using NBitcoin
@using Channel = FundsManager.Data.Models.Channel
@attribute [Authorize(Roles = "FinanceManager, NodeManager, Superadmin")]
<PageTitle>Active Channels</PageTitle>
<h3 class="custom-primary">Channels</h3>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Channel"
                  @ref="_channelsDataGridRef"
                  Data="@_channels"
                  Editable
                  EditMode=DataGridEditMode.Inline
                  Responsive
                  ResizeMode="TableResizeMode.Columns"
                  ShowPager="true"
                  ShowPageSizes="true"
                  PageSize="25"
                  Filterable="true">
            <DataGridColumns>
                <DataGridCommandColumn TItem="Channel">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" TextColor="TextColor.Light" hidden Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" hidden Clicked="@context.Clicked">Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                            </DropdownToggle>
                            <DropdownMenu>
                                @if (_IsUserNodeManager)
                                {
                                    <DropdownItem Disabled="context.Item.Status == Channel.ChannelStatus.Closed" Clicked="@(() => ShowChannelManagementModal(context.Item))">Manage</DropdownItem>
                                    <DropdownItem Disabled="@(checkDisableCloseChannelButton(context.Item))" Clicked="() => ShowConfirmedClose(context.Item)">Close</DropdownItem>
                                    <DropdownItem Disabled="@(checkDisableCloseChannelButton(context.Item))" Clicked="() => ShowConfirmedClose(context.Item, true)">Force close</DropdownItem>
                                    <DropdownItem Disabled="@(checkDisableCloseChannelButton(context.Item))" Clicked="() => MarkAsClosed(context.Item)">Mark as closed</DropdownItem>
                                    <DropdownItem Clicked="@(() => ShowModal(context.Item))">Requests</DropdownItem>
                                }

                            </DropdownMenu>
                        </Dropdown>
                    </DeleteCommandTemplate>
                </DataGridCommandColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.SourceNodeId)" Caption="Source node" CustomFilter="OnSourceNodeIdFilter" Filterable="true" Sortable="false">
                    <FilterTemplate>
                        <Select TValue="int" SelectedValue="@((int) _sourceNodeIdFilter)" SelectedValueChanged="@(value => { _sourceNodeIdFilter = value; context.TriggerFilterChange(_sourceNodeIdFilter); })">
                            <SelectItem Value="@(0)">All</SelectItem>
                            @foreach (var node in _nodes)
                            {
                                <SelectItem Value="@(node.Id)">@(node.Name)(@(StringHelper.TruncateHeadAndTail(node.PubKey, 5)))</SelectItem>
                            }
                        </Select>
                    </FilterTemplate>
                    <DisplayTemplate>
                        @{
                            var sourceNode = Task.Run(() => NodeRepository.GetById(context.SourceNodeId)).Result;
                            @(sourceNode.Name + " " + StringHelper.TruncateHeadAndTail(sourceNode.PubKey, 5))
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.DestinationNodeId)" Caption="Destination node" CustomFilter="OnDestinationNodeIdFilter" Filterable="true" Sortable="false">
                    <FilterTemplate>
                        <Select TValue="int" SelectedValue="@((int) _destinationNodeIdFilter)" SelectedValueChanged="@(value => { _destinationNodeIdFilter = value; context.TriggerFilterChange(_destinationNodeIdFilter); })">
                            <SelectItem Value="@(0)">All</SelectItem>
                            @foreach (var node in _nodes)
                            {
                                <SelectItem Value="@(node.Id)">@(node.Name)(@(StringHelper.TruncateHeadAndTail(node.PubKey, 5)))</SelectItem>
                            }
                        </Select>
                    </FilterTemplate>
                    <DisplayTemplate>
                        @{
                            var destinationNode = Task.Run(() => NodeRepository.GetById(context.DestinationNodeId)).Result;
                            @(destinationNode.Name + " " + StringHelper.TruncateHeadAndTail(destinationNode.PubKey, 5))
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.Status)" Caption="@nameof(Channel.Status)" CustomFilter="OnStatusFilter" Filterable="true" Sortable="false">
                    <FilterTemplate>
                        <Select TValue="string" SelectedValue="@((string) _statusFilter)" SelectedValueChanged="@(value => { _statusFilter = value; context.TriggerFilterChange(_statusFilter); })">
                            <SelectItem Value="@("")">All</SelectItem>
                            <SelectItem Value="@(Channel.ChannelStatus.Open.Humanize())">@Channel.ChannelStatus.Open.Humanize()</SelectItem>
                            <SelectItem Value="@(Channel.ChannelStatus.Closed.Humanize())">@Channel.ChannelStatus.Closed.Humanize()</SelectItem>
                        </Select>
                    </FilterTemplate>
                    <DisplayTemplate>
                        @context.Status.ToString("G")
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Channel" Field="@nameof(Channel.FundingTx)" Caption="OutPoint" Filterable="false" Sortable="false">
                    <DisplayTemplate>
                        @StringHelper.TruncateHeadAndTail(context.FundingTx, 5):@context.FundingTxOutputIndex
                        <Button Color="Color.Primary" Clicked="@(() => CopyStrToClipboard($"{context.FundingTx}:{context.FundingTxOutputIndex}"))">
                            <i class="oi oi-clipboard"></i>
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridNumericColumn TItem="Channel" Field="@nameof(Channel.SatsAmount)" Caption="Capacity (BTC)" Filterable="false" Sortable="true">
                    <DisplayTemplate>
                        @{
                            var btcAmount = new Money(context.SatsAmount, MoneyUnit.Satoshi).ToUnit(MoneyUnit.BTC);
                            @($"{btcAmount} BTC")
                            @($" ({Math.Round(PriceConversionHelper.BtcToUsdConversion(btcAmount, _btcPrice), 2)} USD)")
                        }
                    </DisplayTemplate>
                </DataGridNumericColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.IsPrivate)" Caption="Private" Filterable="false" Sortable="true"/>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.BtcCloseAddress)" Caption="Close address" Filterable="false" Sortable="false">

                    <DisplayTemplate>
                        @if (!string.IsNullOrEmpty(context.BtcCloseAddress))
                        {
                            @StringHelper.TruncateHeadAndTail(context.BtcCloseAddress, 5)
                            <Button Color="Color.Primary" Clicked="@(() => CopyStrToClipboard(context.BtcCloseAddress))">
                                <i class="oi oi-clipboard"></i>
                            </Button>
                        }
                    </DisplayTemplate>

                </DataGridColumn>
                <DataGridColumn TItem="Channel" Caption="Channel Balance" Filterable="false">
                    <DisplayTemplate>
                        @{
                            var balance = Task.Run(() => GetPercentageBalance(context)).Result;
                            var percentageBalance = 0;
                            if (balance != null)
                            {
                                percentageBalance = Convert.ToInt32(balance);
                            }

                        }
                        @if (balance != null)
                        {
                            <Progress Color="Color.Primary" Value="@percentageBalance"/>
                            <Text>
                                @{
                                    @($"{balance}%")
                                }
                            </Text>
                        }
                        else
                        {
                            <p>Not available</p>
                        }

                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.CreationDatetime)" Caption="@nameof(Channel.CreationDatetime).Humanize(LetterCasing.Sentence)" Sortable="true"/>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.UpdateDatetime)" Caption="@nameof(Channel.UpdateDatetime).Humanize(LetterCasing.Sentence)" Sortable="true"/>

            </DataGridColumns>
        </DataGrid>
    </Column>
</Row>
<Modal @bind-Visible="@_modalVisible">
    <ModalContent Centered Scrollable Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Channels requests related to Channel: @_selectedChannel?.ChanId</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <DataGrid TItem="ChannelOperationRequest"
                      Data=@_selectedChannel?.ChannelOperationRequests
                      Sortable="false"
                      ShowCaptions="true">
                <DataGridColumn Field="@nameof(ChannelOperationRequest.Id)" Caption="@nameof(ChannelOperationRequest.Id)"/>
                <DataGridColumn Field="@nameof(ChannelOperationRequest.User)" Caption="Created by"/>
                <DataGridColumn Field="@nameof(ChannelOperationRequest.RequestType)" Caption="Request type"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Wallet" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Value" Sortable="false" Displayable="true">
                    <DisplayTemplate>
                        @{
                            @($"{context.Amount} BTC")
                            @($" ({Math.Round(PriceConversionHelper.BtcToUsdConversion(context.Amount, _btcPrice), 2)} USD)")
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ChannelOperationRequest" Caption="Signatures Collected" Sortable="false" Displayable="true">
                    <DisplayTemplate>
                        @if (context.RequestType == OperationRequestType.Open)
                        {
                            var signaturesCollected = context.NumberOfSignaturesCollected + (context.Wallet.IsSingleSig ? 0 : 1);
                            var signaturesRequired = context?.Wallet?.MofN ?? 0;
                            @($"{signaturesCollected} out of {signaturesRequired}")
                        }
                        else
                        {
                            <p>N/A</p>
                        }

                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status)" Caption="Status" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="@nameof(ChannelOperationRequest.CreationDatetime).Humanize(LetterCasing.Sentence)" Sortable="true" SortDirection="SortDirection.Descending"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="@nameof(ChannelOperationRequest.UpdateDatetime).Humanize(LetterCasing.Sentence)" Sortable="false"/>
            </DataGrid>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Back</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_channelLiquidityModal">
    @if (_selectedChannel != null)
    {
        <ModalContent Centered Scrollable Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <ModalTitle>Liquidity management for channel: @_selectedChannel.ChanId </ModalTitle>
                <CloseButton/>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Enable automated liquidity management</FieldLabel>
                    <Check TValue="bool" Checked="@_selectedChannel.IsAutomatedLiquidityEnabled" CheckedChanged="OnEnableLiquidityMgnmtChanged"></Check>

                </Field>

                @if (_selectedChannel.IsAutomatedLiquidityEnabled)
                {
                    <Validations @ref="_channelManagementValidationsRef">

                        <Field>
                            <Validation Validator="ValidateLocalBalance">
                                <FieldLabel>Minimum local balance</FieldLabel>
                                <FieldHelp>Balance % that will fire a reverse swap if the channel balance goes below this percent (0 means optional)</FieldHelp>
                                <NumericEdit TValue="decimal?" Min="0M" Max="100M" @bind-Value="_currentLiquidityRule.MinimumLocalBalance">
                                    <Feedback>
                                        <ValidationError>The number should be between 0 and 100 and less than minimum remote balance</ValidationError>
                                    </Feedback>
                                </NumericEdit>
                            </Validation>
                        </Field>

                        <Field>
                            <Validation Validator="ValidateRemoteBalance">
                                <FieldLabel>Minimum remote balance</FieldLabel>
                                <FieldHelp>Balance % that will fire a swap if the channel balance goes above this percent (0 means optional)</FieldHelp>
                                <NumericEdit TValue="decimal?" Min="0M" Max="100M" @bind-Value="_currentLiquidityRule.MinimumRemoteBalance">
                                    <Feedback>
                                        <ValidationError>The number should be between 0 and 100 and bigger than minimum local balance</ValidationError>
                                    </Feedback>
                                </NumericEdit>
                            </Validation>
                        </Field>
                        <Field>
                            <Validation Validator="ValidateTargetBalance">
                                <FieldLabel>Target balance</FieldLabel>
                                <FieldHelp>Desired target balance % after a swap operation is performed</FieldHelp>
                                <NumericEdit TValue="decimal?" Min="0M" Max="100M" @bind-Value="_currentLiquidityRule.RebalanceTarget">
                                    <Feedback>
                                        <ValidationError>The number should be between 0 and 100 and in between minimum local and remote balance (0 means optional)</ValidationError>
                                    </Feedback>
                                </NumericEdit>
                            </Validation>
                        </Field>


                        <Field>
                            <Validation Validator="ValidationRule.IsSelected">
                                <FieldLabel>Wallet to use in Swaps operations</FieldLabel>
                                <SelectList TItem="Wallet"
                                            TValue="int"
                                            Data="@_availableWallets"
                                            SelectedValue="_currentLiquidityRule.WalletId"
                                            TextField="@((item) => item.Name)"
                                            ValueField="@((item) => item.Id)"
                                            SelectedValueChanged="@OnSelectedWalletChanged"
                                            DefaultItemText="Choose the wallet to fund/receive swap amounts">
                                    <Feedback>
                                        <ValidationError>A wallet for swaps operation must be selected as target/origin of funds</ValidationError>
                                    </Feedback>
                                </SelectList>
                            </Validation>
                        </Field>

                    </Validations>
                }

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@CloseChannelManagementModal">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@SaveAndCloseChannelManagementModal">Save</Button>
            </ModalFooter>
        </ModalContent>
    }

</Modal>


@inject IChannelRepository ChannelRepository
@inject IToastService ToastService
@inject ClipboardService ClipboardService
@inject IMessageService MessageService
@inject ILightningService LightningService
@inject ILiquidityRuleRepository LiquidityRuleRepository
@inject IWalletRepository WalletRepository
@inject INodeRepository NodeRepository

@code {
    private List<Channel>? _channels = new List<Channel>();
    private Channel? _selectedChannel;
    private bool _modalVisible;
    private bool _IsUserNodeManager = false;
    private DataGrid<Channel> _channelsDataGridRef;
    private Modal? _channelLiquidityModal;
    private List<Wallet> _availableWallets = new List<Wallet>();
    private LiquidityRule _currentLiquidityRule = new LiquidityRule();
    private Validations _channelManagementValidationsRef;
    private string _statusFilter = "Open";
    private int _sourceNodeIdFilter = 0;
    private int _destinationNodeIdFilter = 0;
    private List<Node> _nodes = new List<Node>();

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal { get; set; }

    private decimal _btcPrice;

    protected override async Task OnInitializedAsync()
    {
        _btcPrice = PriceConversionHelper.GetBtcToUsdPrice();
        if (_btcPrice == 0)
        {
            ToastService.ShowError("Bitcoin price in USD could not be retrieved.");
        }
        if (LoggedUser != null)
        {
            await FetchData();
            if (ClaimsPrincipal != null && ClaimsPrincipal.IsInRole(ApplicationUserRole.NodeManager.ToString()))
            {
                _IsUserNodeManager = true;
            }
        }
    }

    private async Task FetchData()
    {
        _availableWallets = await WalletRepository.GetAvailableWallets();
        _channels = await ChannelRepository.GetAllManagedByUserNodes(LoggedUser.Id);
        _nodes = await NodeRepository.GetAll();
        _channelsDataGridRef.FilterData();
    }

    private async Task ShowConfirmedClose(Channel channel, bool forceClose = false)
    {
        if (await MessageService.Confirm($"Are you sure you want to {(forceClose ? "force " : string.Empty)}close this channel?", "Confirmation"))
        {
            if (channel != null)
            {
                channel.DestinationNode = await NodeRepository.GetById(channel.DestinationNodeId);
                channel.SourceNode = await NodeRepository.GetById(channel.SourceNodeId);
                var result = await ChannelRepository.SafeRemove(channel, forceClose);

                if (!result.Item1)
                {
                    ToastService.ShowError("Something went wrong");
                }
                else
                {
                    ToastService.ShowSuccess("Channel closed successfully");
                    await FetchData();
                }
            }
            else
            {
                ToastService.ShowError("Something went wrong. Please refresh the page");
            }
        }
    }

    private void ShowModal(Channel channel)
    {
        _modalVisible = true;
        _selectedChannel = channel;
    }

    private void HideModal()
    {
        _modalVisible = false;
        _selectedChannel = null;
    }

    private async Task CopyStrToClipboard(string arg)
    {
        await ClipboardService.WriteTextAsync(arg);
        ToastService.ShowSuccess("Text copied");
    }

    private async Task<double?> GetPercentageBalance(Channel channel)
    {
        try
        {
            double? result = null;
            var values = await LightningService.GetChannelBalance(channel);
            if (values.Item1 != null && values.Item2 != null)
            {
                result = (values.Item2 / (double) (values.Item2 + values.Item1)) * 100;
                result = Math.Round(result.Value, 2);
            }
            else
            {
                result = null;
            }

            return result;
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Channel balance for channel id:{channel.Id} could not be retrieved");
            return null;
        }
    }

    private async Task OnSelectedWalletChanged(int arg)
    {
        _currentLiquidityRule.WalletId = arg;
    }

    private async Task CloseChannelManagementModal()
    {
        await _channelLiquidityModal?.Close(CloseReason.UserClosing);
        await ClearManagementModal();
        await FetchData();
    }

    private async Task SaveAndCloseChannelManagementModal()
    {
        if (await _channelManagementValidationsRef.ValidateAll())
        {
    //Save the channel
            var updateResult = ChannelRepository.Update(_selectedChannel);
            if (!updateResult.Item1)
            {
                ToastService.ShowError("Something went wrong");
            }
            else
            {
                ToastService.ShowSuccess("Channel updated successfully");
            }

    //Save the liquidity rule if the liquidity rule id is below or equal zero
            if (_currentLiquidityRule != null)
            {
                if (_currentLiquidityRule.Id <= 0)
                {
                    var liquidityRuleResult = await LiquidityRuleRepository.AddAsync(_currentLiquidityRule);
                    if (!liquidityRuleResult.Item1)
                    {
                        ToastService.ShowError("Something went wrong");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Liquidity rule added successfully");
                    }
                }
                else
                {
                    var liquidityRuleResult = LiquidityRuleRepository.Update(_currentLiquidityRule);
                    if (!liquidityRuleResult.Item1)
                    {
                        ToastService.ShowError("Something went wrong");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Liquidity rule updated successfully");
                    }
                }
            }

            await CloseChannelManagementModal();
        }
        else
        {
            ToastService.ShowError("Please fix the errors");
        }
    }

    private async Task ClearManagementModal()
    {
        _selectedChannel = null;
        _currentLiquidityRule = new LiquidityRule();
    }

    private async Task ShowChannelManagementModal(Channel channel)
    {
        await ClearManagementModal();

        _selectedChannel = channel;

        var destinationNode = await NodeRepository.GetById(channel.DestinationNodeId);
        var sourceNode = await NodeRepository.GetById(channel.SourceNodeId);
        var node = String.IsNullOrEmpty(sourceNode.ChannelAdminMacaroon) ? destinationNode : sourceNode;

        //If there is a liquidity rule for this channel, we load it, the first one
        _currentLiquidityRule = _selectedChannel?.LiquidityRules.FirstOrDefault() ?? new LiquidityRule
        {
            MinimumLocalBalance = 20,
            MinimumRemoteBalance = 80,
            RebalanceTarget = 50,
            ChannelId = channel.Id,
            NodeId = node.Id
        };

        await _channelLiquidityModal?.Show();
    }

    private async Task OnEnableLiquidityMgnmtChanged(bool obj)
    {
        _selectedChannel.IsAutomatedLiquidityEnabled = obj;

        if (!obj) _currentLiquidityRule = null;

        var updateResult = ChannelRepository.Update(_selectedChannel);

        if (!updateResult.Item1)
        {
            ToastService.ShowError("Something went wrong");
        }
        else
        {
            ToastService.ShowSuccess("Channel updated successfully");
        }
    }

    private void ValidateTargetBalance(ValidatorEventArgs arg1)
    {
    //Default validation status
        arg1.Status = ValidationStatus.Success;

    //If the value is 0 is valid
        if (_currentLiquidityRule.RebalanceTarget == 0 || _currentLiquidityRule.RebalanceTarget == null)
        {
            return;
        }
    //Check that the target balance is between 0 and 100
        if (_currentLiquidityRule.RebalanceTarget < 0 || _currentLiquidityRule.RebalanceTarget > 100)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Target balance must be between 0 and 100";
        }


    //Check that the rebalancetarget of the current liquidity rule is between the mininum local and minimum remote balance
        if (_currentLiquidityRule.RebalanceTarget < _currentLiquidityRule.MinimumLocalBalance ||
            _currentLiquidityRule.RebalanceTarget > _currentLiquidityRule.MinimumRemoteBalance)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Rebalance target must be between the minimum local and minimum remote balance";
        }
    }

    private void ValidateRemoteBalance(ValidatorEventArgs arg1)
    {
    //Default validation status
        arg1.Status = ValidationStatus.Success;

    //If the minimum local balance is 0 this cannot be 0
        if ((_currentLiquidityRule.MinimumLocalBalance == 0 || _currentLiquidityRule.MinimumLocalBalance == null)
            && (_currentLiquidityRule.MinimumRemoteBalance == 0 || _currentLiquidityRule.MinimumRemoteBalance == null))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum remote balance cannot be 0 if the minimum local balance is 0";
        }

    //If the value is 0 is valid
        if (_currentLiquidityRule.MinimumRemoteBalance == 0 || _currentLiquidityRule.MinimumRemoteBalance == null)
        {
            return;
        }


    //Check that the minimum remote balance is between 0 and 100
        if (_currentLiquidityRule.MinimumRemoteBalance < 0 || _currentLiquidityRule.MinimumRemoteBalance > 100)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum remote balance must be between 0 and 100";
        }


    //Check that the Minimum remote balance must be greater than the minimum local balance
        if (_currentLiquidityRule.MinimumRemoteBalance <= _currentLiquidityRule.MinimumLocalBalance)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum remote balance must be greater than the minimum local balance";
        }
    }

    private void ValidateLocalBalance(ValidatorEventArgs arg1)
    {
    //Default validation status
        arg1.Status = ValidationStatus.Success;
    //If the minimum remote balance is 0 this cannot be 0
        if ((_currentLiquidityRule.MinimumLocalBalance == 0 || _currentLiquidityRule.MinimumLocalBalance == null)
            && (_currentLiquidityRule.MinimumRemoteBalance == 0 || _currentLiquidityRule.MinimumRemoteBalance == null))
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum local balance cannot be 0 if the minimum remote balance is 0";
        }

    //If the value is 0 is valid
        if (_currentLiquidityRule.MinimumRemoteBalance == 0 || _currentLiquidityRule.MinimumRemoteBalance == null)
        {
            return;
        }


    //Check that the balance is between 0 and 100

        if (_currentLiquidityRule.MinimumLocalBalance < 0 || _currentLiquidityRule.MinimumLocalBalance > 100)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum local balance must be between 0 and 100";
        }

    //Check that the Minimum local balance must be less than the minimum remote balance
        if (_currentLiquidityRule.MinimumLocalBalance >= _currentLiquidityRule.MinimumRemoteBalance)
        {
            arg1.Status = ValidationStatus.Error;
            arg1.ErrorText = "Minimum local balance must be less than the minimum remote balance";
        }
    }

    private bool OnStatusFilter(object itemValue, object searchValue)
    {
    //If searchValue is null, we set it to the filter initial value in the field
        searchValue ??= _statusFilter;
        if (searchValue is string statusFilter)
        {
            return statusFilter == "*" || statusFilter == itemValue?.ToString();
        }

        return true;
    }


    private bool OnSourceNodeIdFilter(object itemValue, object searchValue)
    {
    //If searchValue is null, we set it to the filter initial value in the field
        searchValue ??= _sourceNodeIdFilter;
        if (searchValue is int nodeIdFilter)
        {
            return nodeIdFilter == 0 || nodeIdFilter == itemValue as int?;
        }

        return true;
    }

    private bool OnDestinationNodeIdFilter(object itemValue, object searchValue)
    {
    //If searchValue is null, we set it to the filter initial value in the field
        searchValue ??= _destinationNodeIdFilter;
        if (searchValue is int nodeIdFilter)
        {
            return nodeIdFilter == 0 || nodeIdFilter == itemValue as int?;
        }

        return true;
    }


    private async Task MarkAsClosed(Channel contextItem)
    {
        var result = await ChannelRepository.MarkAsClosed(contextItem);

        if (result.Item1)
        {
            ToastService.ShowSuccess("Channel marked as closed");
        }
        else
        {
            ToastService.ShowError("Something went wrong: " + result.Item2);
        }

        await FetchData();
    }

    private bool checkDisableCloseChannelButton(Channel channel)
    {
        ChannelOperationRequest? lastRequest = channel.ChannelOperationRequests.LastOrDefault();
        if (lastRequest == null && channel.CreatedByNodeGuard == false) return false;
        return channel.Status == Channel.ChannelStatus.Closed|| (lastRequest.RequestType == OperationRequestType.Close
                                                                 && lastRequest.Status == ChannelOperationRequestStatus.OnChainConfirmed
                                                                 || lastRequest.Status == ChannelOperationRequestStatus.OnChainConfirmationPending);
    }
}