@page "/channels"
@using System.Security.Claims
@using Humanizer
@attribute [Authorize(Roles = "FinanceManager, NodeManager, Superadmin")]
<PageTitle>Active Channels</PageTitle>
<h3>Channels</h3>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Channel"
                  Data="@_channels"
                  @bind-SelectedRow="@_selectedChannel"
                  Editable
                  EditMode=DataGridEditMode.Inline
                  Responsive
                  ResizeMode="TableResizeMode.Columns"
                  ShowPager="true"
                  ShowPageSizes="true"
                  PageSize="25"
                  Filterable="true">
            <DataGridColumns>
                <DataGridCommandColumn TItem="Channel">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" hidden Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" hidden Clicked="@context.Clicked">Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" hidden="@_hideDelete" Disabled="@(context.Item.Status == Channel.ChannelStatus.Closed)" Clicked="()=>ShowConfirmedClose(context.Item)">Close</Button>
                    </DeleteCommandTemplate>
                </DataGridCommandColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.Status)" Caption="@nameof(Channel.Status)" Sortable="false">
                    <DisplayTemplate>
                        @context.Status.ToString("G")
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Channel" Field="@nameof(Channel.FundingTx)" Caption="Funding tx" Sortable="false">
                    <DisplayTemplate>
                        @StringHelper.TruncateHeadAndTail(context.FundingTx,5)
                        <Button Color="Color.Primary" Clicked="@(()=> CopyStrToClipboard(context.FundingTx))">
                        <i class="oi oi-clipboard"></i> 
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridNumericColumn TItem="Channel" Field="@nameof(Channel.FundingTxOutputIndex)" Caption="Funding address index" Sortable="false">

                </DataGridNumericColumn>
                <DataGridNumericColumn TItem="Channel" Field="@nameof(Channel.SatsAmount)" Caption="Capacity (Sats)" Sortable="false" />
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.BtcCloseAddress)" Caption="Treasury return address" Sortable="false">
                   
                <DisplayTemplate>
                    @if (context.BtcCloseAddress != null)
                    {
                        @StringHelper.TruncateHeadAndTail(context.BtcCloseAddress, 5)
                        <Button Color="Color.Primary" Clicked="@(() => CopyStrToClipboard(context.BtcCloseAddress))">
                            <i class="oi oi-clipboard"></i>
                        </Button>
                    }
                </DisplayTemplate>
                 
                </DataGridColumn>
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.CreationDatetime)" Caption="@nameof(Channel.CreationDatetime).Humanize(LetterCasing.Sentence)" Sortable="false" />
                <DataGridColumn TItem="Channel" Field="@nameof(Channel.UpdateDatetime)" Caption="@nameof(Channel.UpdateDatetime).Humanize(LetterCasing.Sentence)" Sortable="false" />
                <DataGridColumn TItem="Channel" Caption="Requests" Sortable="false">
                    <DisplayTemplate>
                        <Button Color="Color.Primary" Clicked="@ShowModal">See</Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </Column>
</Row>
<Modal @bind-Visible="@_modalVisible">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Users assigned to Channel: @_selectedChannel?.ChannelId</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <DataGrid TItem="ChannelOperationRequest"
                      Data=@_selectedChannel?.ChannelOperationRequests
                      Sortable="false"
                      ShowCaptions="true">
                <DataGridColumn Field="@nameof(ChannelOperationRequest.Id)" Caption="@nameof(ChannelOperationRequest.Id)" />
                <DataGridColumn Field="@nameof(ChannelOperationRequest.User)" Caption="Created By" />
                <DataGridColumn Field="@nameof(ChannelOperationRequest.RequestType)" Caption="@nameof(ChannelOperationRequest.RequestType)" />
                <DataGridColumn TItem="ChannelOperationRequest" Field="SourceNode.Name" Caption="Source Node" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="DestNode.Name" Caption="Remote Node" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="Wallet.Name" Caption="Source of Funds" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Amount)" Caption="Value" Sortable="false" Displayable="true">
                    <DisplayTemplate>
                        @{
                            @($"{context.Amount} BTC")
                            @($" ({Math.Round(PriceConversionHelper.BtcToUsdConversion(context.Amount, _btcPrice), 2)} USD)")
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ChannelOperationRequest" Caption="Signatures Collected" Sortable="false" Displayable="true">
                    <DisplayTemplate>
                        @{
                            var signaturesCollected = context.NumberOfSignaturesCollected + 1 ;
                            var signaturesRequired = context?.Wallet?.MofN ?? 0;
                            @($"{signaturesCollected} out of {signaturesRequired}")
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.Status)" Caption="Status" Sortable="false" Displayable="true"/>
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.CreationDatetime)" Caption="@nameof(ChannelOperationRequest.CreationDatetime)" Sortable="false" />
                <DataGridColumn TItem="ChannelOperationRequest" Field="@nameof(ChannelOperationRequest.UpdateDatetime)" Caption="@nameof(ChannelOperationRequest.UpdateDatetime)" Sortable="false" />
            </DataGrid>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Back</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@inject IChannelRepository ChannelRepository
@inject IToastService ToastService
@inject ClipboardService ClipboardService
@inject IMessageService MessageService
@code {
    private List<Channel>? _channels;
    private Channel? _selectedChannel;
    private bool _modalVisible;
    private bool _hideDelete = true;

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }

    [CascadingParameter]
    private ClaimsPrincipal? ClaimsPrincipal { get; set; }

    private decimal _btcPrice;

    protected override async Task OnInitializedAsync()
    {
        _btcPrice = PriceConversionHelper.GetBtcToUsdPrice();
        if (_btcPrice == 0)
        {
            ToastService.ShowError("Bitcoin price in USD could not be retrieved.");
        }
        if (LoggedUser != null)
        {
            _channels = await ChannelRepository.GetAll();
            if (ClaimsPrincipal != null && (ClaimsPrincipal.IsInRole(ApplicationUserRole.NodeManager.ToString()) || ClaimsPrincipal.IsInRole(ApplicationUserRole.Superadmin.ToString())))
            {
                _hideDelete = false;
            }
        }
    }

    private async Task ShowConfirmedClose(Channel channel)
    {
            if ( await MessageService.Confirm( "Are you sure you want to close this channel?", "Confirmation" ) )
            {
                if (channel != null)
                {
                    var result =await ChannelRepository.SafeRemove(channel);

                    if (!result.Item1)
                    {
                      
                        ToastService.ShowError("Something went wrong");
                    }
                    else
                    {
                        ToastService.ShowSuccess("Channel closed successfully");
                        _channels = await ChannelRepository.GetAll();
                    }
                }
                else
                {
                    ToastService.ShowError("Something went wrong. Please refresh the page");
                }

            }
           
        }
    
    private void ShowModal()
    {
        _modalVisible = true;
    }

    private void HideModal()
    {
        _modalVisible = false;
    }

    private async Task CopyStrToClipboard(string arg)
    {
        await ClipboardService.WriteTextAsync(arg); 
        ToastService.ShowSuccess("Text copied");
    }

}