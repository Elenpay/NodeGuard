@page "/wallets"
@using System.Security.Claims
@using FundsManager.Helpers
@using Humanizer
@inject IWalletRepository WalletRepository
@inject IToastService ToastService
@inject IApplicationUserRepository ApplicationUserRepository
@inject IInternalWalletRepository InternalWalletRepository
@inject IKeyRepository KeyRepository
@attribute [Authorize(Roles = "NodeManager")]

<h3>Funds Manager multisig wallets</h3>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Wallet"
                  Data="@_wallets"
                  Editable="true"
                  EditMode="DataGridEditMode.Form"
                  Responsive="true"
                  ResizeMode="TableResizeMode.Columns"
                  UseInternalEditing="true"
                  RowInserted="OnRowInserted"
                  RowRemoving="OnRowRemoving"
                  RowUpdated="OnRowUpdated"
                  NewItemDefaultSetter="NewItemDefaultSetter">
            <DataGridColumns>
                <DataGridCommandColumn TItem="Wallet">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Add key</Button>

                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        @*@<Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>*@
                    </DeleteCommandTemplate>

                </DataGridCommandColumn>

                <DataGridColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.Name)" Caption="@nameof(Wallet.Name)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.Description)" Caption="@nameof(Wallet.Description)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.IsArchived)" Caption="@nameof(Wallet.IsArchived).Humanize(LetterCasing.Sentence)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.IsCompromised)" Caption="@nameof(Wallet.IsCompromised).Humanize(LetterCasing.Sentence)" Sortable="false" />
                <DataGridNumericColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.MofN)" Caption="@nameof(Wallet.MofN).Humanize(LetterCasing.Sentence)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Field="@nameof(Wallet.CreationDatetime)" Caption="@nameof(Wallet.CreationDatetime)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Field="@nameof(Wallet.CreationDatetime)" Caption="@nameof(Wallet.CreationDatetime)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Field="@nameof(Wallet.UpdateDatetime)" Caption="@nameof(Wallet.UpdateDatetime).Humanize(LetterCasing.Sentence)" Sortable="false" />

            </DataGridColumns>
            <DetailRowTemplate>
                @{
                    var keys = (context as Wallet).Keys;
                    <ReadOnlyKeyDatagrid Keys="@keys"></ReadOnlyKeyDatagrid>

                }
            </DetailRowTemplate>

        </DataGrid>
    </Column>
</Row>
<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Please select the amount of keys that will conform this wallet</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Select the Finance user(s) who will be a co-approver</FieldLabel>
                <SelectList TItem="ApplicationUser"
                            TValue="ApplicationUser"
                            Data="@_financeManagers"
                            TextField="@((item)=>item.UserName)"
                            ValueField="@((item)=>item)"
                            SelectedValue="@_financeManagers.FirstOrDefault()"
                            SelectedValueChanged="@OnSelectedFinanceManager"
                            DefaultItemText="Choose the approver" />

            </Field>
            @if (_selectedFinanceManager != null && _selectedFinanceManager.Keys.Any())
            {
                <Field>
                    <FieldLabel>Select the Finance user(s) key</FieldLabel>
                    <SelectList TItem="Key"
                            TValue="Key"
                            Data="@_selectedFinanceManagerKeys"
                            TextField="@((item)=> $"{item.Name}-{item.GetTruncatedXPUBString()}")"
                            ValueField="@((item)=>item)"
                            SelectedValue="@_financeManagers.FirstOrDefault()"
                            SelectedValueChanged="@OnSelectedWalletKey"
                            DefaultItemText="Choose the key of the manager" />
                </Field>
            }

            <Field>
                <FieldLabel>Selected keys</FieldLabel>
                <ReadOnlyKeyDatagrid Keys="_selectedWalletKeysPlusInternalWalletKey"></ReadOnlyKeyDatagrid>

            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveAndCloseModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [CascadingParameter]
    private ApplicationUser? _loggedUser { get; set; }


    [CascadingParameter]
    private ClaimsPrincipal _claimsPrincipal { get; set; }

    private List<ApplicationUser> _financeManagers = new List<ApplicationUser>();

    private Modal _modalRef;

    private List<Wallet> _wallets = new List<Wallet>();

    private Wallet? _selectedWallet;

    private ApplicationUser? _selectedFinanceManager;

    private List<Key> _selectedWalletKeysPlusInternalWalletKey = new();
    private List<Key> _selectedFinanceManagerKeys;

    protected override async Task OnInitializedAsync()
    {
        if (_loggedUser != null)
        {
            await GetData();
        }


    }

    private async Task GetData()
    {

        _wallets = await WalletRepository.GetAll();
        var financeManagers = (await ApplicationUserRepository.GetUsersInRole(ApplicationUserRole.FinanceManager));
        var allUsers = await ApplicationUserRepository.GetAll();
        _financeManagers = allUsers.Where(x => financeManagers.Contains(x) && x.Keys.Any()).ToList();
    }


    private async Task OnRowInserted(SavedRowItem<Wallet, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var addResult = await WalletRepository.AddAsync(arg.Item);


        if (addResult.Item1)
        {
            ToastService.ShowSuccess("Success");
            await GetData();
        }
        else
        {
            ToastService.ShowError("Something went wrong");
            _wallets.Remove(arg.Item);

        }


    }

    private void NewItemDefaultSetter(Wallet obj)
    {

        obj.WalletAddressType = WalletAddressType.NativeSegwit;

    }

    private async Task OnRowRemoving(CancellableRowChange<Wallet> arg)
    {
        if (arg.Item != null)
        {

            var (result, message) = WalletRepository.Remove(arg.Item);

            if (!result)
            {

                arg.Cancel = true;
                ToastService.ShowError("Something went wrong");
            }
            else
            {
                ToastService.ShowSuccess("Success");
                await GetData();
            }
        }
    }


    private async Task OnRowUpdated(SavedRowItem<Wallet, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var updateResult = WalletRepository.Update(arg.Item);


        if (updateResult.Item1)
        {
            ToastService.ShowSuccess("Success");
        }
        else
        {
            ToastService.ShowError("Something went wrong");
        }

        await GetData();
    }

    private async Task CloseModal()
    {
        await CleanModal();
        await _modalRef.Close(CloseReason.UserClosing);
    }

    private async Task CleanModal()
    {
        throw new NotImplementedException();
    }

    private async Task LoadAndOpenModal()
    {
        if (_selectedWallet == null || _selectedWallet.Id <= 0 || !_selectedWallet.Keys.Any())
            return;

        await CleanModal();
    }

    private async Task SaveAndCloseModal()
    {
        if (_selectedWallet == null) return;

        await CleanModal();
    }

    private async Task OnSelectedFinanceManager(ApplicationUser? applicationUser)

    {
        if (applicationUser != null)
        {
            _selectedFinanceManager = applicationUser;
            if (_selectedFinanceManager.Keys.Any() && _selectedWallet != null)
            {
                _selectedFinanceManagerKeys = _selectedFinanceManager.Keys.
                    Where(x => !x.IsArchived && !x.IsCompromised && !x.IsFundsManagerPrivateKey && !_selectedWallet.Keys.Contains(x))
                    .ToList();

            }

        }
    }


    private Task OnSelectedWalletKey(Key arg)
    {
        if (arg != null)
        {

        }
        
    }

}



