@page "/wallets"
@using System.Security.Claims
@using Humanizer
@using NBitcoin
@using NBXplorer.DerivationStrategy
@using Key = FundsManager.Data.Models.Key
@inject IWalletRepository WalletRepository
@inject IToastService ToastService
@inject IApplicationUserRepository ApplicationUserRepository
@inject IInternalWalletRepository InternalWalletRepository
@inject IKeyRepository KeyRepository
@inject ILightningService LightningService
@attribute [Authorize(Roles = "NodeManager, FinanceManager, Superadmin")]

<h3>Treasury multisig wallets</h3>

<Row>
    <Column ColumnSize="ColumnSize.Is12">
        <DataGrid TItem="Wallet"
                  Data="@_wallets"
                  Editable="@_isFinanceManager"
                  EditMode="DataGridEditMode.Popup"
                  Responsive="true"
                  ResizeMode="TableResizeMode.Columns"
                  UseInternalEditing="true"
                  RowInserted="OnRowInserted"
                  RowRemoving="OnRowRemoving"
                  RowUpdated="OnRowUpdated"
                  DetailRowStartsVisible="false"
                  NewItemDefaultSetter="NewItemDefaultSetter"
                  ShowPager="true"
                  ShowPageSizes="true"
                  PageSize="25"
                  Filterable="true"
                  UseValidation="true"
                  >
            <DataGridColumns>
                <DataGridCommandColumn TItem="Wallet">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        @if (!context.Item.IsFinalised)
                        {
                            <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
                        }
                        @*TODO Archive features*@
                    </DeleteCommandTemplate>

                </DataGridCommandColumn>
                <DataGridColumn TItem="Wallet" Filterable="false" ShowCaption="false" Sortable="false">
                    <DisplayTemplate>
                        @if (context.IsFinalised)
                        {
                            <Button Color="Color.Secondary" Clicked="@(() => LoadAndOpenTextModalBalance(context))">Balance</Button>
                        }
                        else
                        {
                            <Button Color="Color.Info" Disabled="@(context.Keys != null && context.Keys.Count >= context.MofN)" Clicked="@(() => LoadAndOpenModal(context))">Add key</Button>

                        }
                        
                    </DisplayTemplate>
                </DataGridColumn> 
                <DataGridColumn TItem="Wallet" Filterable="false" ShowCaption="false" Sortable="false">
                    <DisplayTemplate>
                        @if (context.IsFinalised)
                        {
                            <Button Color="Color.Secondary" Clicked="@(() => LoadAndOpenModalTextModalUnusedAddress(context))">Get address</Button>
                        }
                        else
                        {
                            <Button Color="Color.Warning" Disabled="@(context.Keys != null && context.Keys.Count < context.MofN)" Clicked="@(() => LoadAndOpenFinaliseTextModal(context))">Finalise</Button>
                        }
                        
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Wallet" Editable="true" Validator="ValidationRule.IsNotEmpty" Field="@nameof(Wallet.Name)" Caption="@nameof(Wallet.Name)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" Field="@nameof(Wallet.Description)" Caption="@nameof(Wallet.Description)" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="false" Field="@nameof(Wallet.IsFinalised)" Caption="Finalised" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" CellsEditableOnNewCommand="false" Field="@nameof(Wallet.IsArchived)" Caption="Archived" Sortable="false" />
                <DataGridColumn TItem="Wallet" Editable="true" CellsEditableOnNewCommand="false" Field="@nameof(Wallet.IsCompromised)" Caption="Compromised" Sortable="false" />
                <DataGridNumericColumn TItem="Wallet" Decimals="0" Editable="true"  Field="@nameof(Wallet.MofN)" Caption="Threshold" Sortable="false">
                    <EditTemplate>
                        @if (!context.Item.IsFinalised)
                        {
                        <Validation Validator="@ValidateThreshold">
                            <NumericEdit TValue="int" Value="@((int)context.CellValue)" ValueChanged="(value) => {context.CellValue = value; }">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>                         
                        </Validation>
                        }
                        else
                        {
                            <Validation Validator="@ValidateThreshold">
                                <NumericEdit TValue="int" Value="@((int)context.CellValue)" Disabled ValueChanged="(value) => {context.CellValue = value; }">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericEdit>                         
                            </Validation>
                        }
                    </EditTemplate>
                </DataGridNumericColumn>
                <DataGridColumn TItem="Wallet" Field="@nameof(Wallet.CreationDatetime)" Caption="Creation Date" Sortable="true">
                    <DisplayTemplate>
                        @context.CreationDatetime.Humanize()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Wallet" Field="@nameof(Wallet.UpdateDatetime)" Caption="Update date" Sortable="true">
                    <DisplayTemplate>
                        @context.UpdateDatetime.Humanize()
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
            <DetailRowTemplate>
                @{
                    var keys = (context as Wallet).Keys?.ToList() ?? new List<Key>();
                    <ReadOnlyKeyDatagrid Keys="@keys"></ReadOnlyKeyDatagrid>

                }
            </DetailRowTemplate>

        </DataGrid>
    </Column>
</Row>
<Modal @ref="_modalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Please select the key will be added this wallet</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Select the Finance user(s) who will be a co-approver</FieldLabel>
                <SelectList TItem="ApplicationUser"
                            TValue="string"
                            Data="@_financeManagers"
                            TextField="@((item)=>item.UserName)"
                            ValueField="@((item)=>item.Id)"
                            SelectedValueChanged="@OnSelectedFinanceManager"
                            DefaultItemText="Choose the approver" />

            </Field>
            @if (_selectedFinanceManager != null && _selectedFinanceManagerAvailableKeys.Any())
            {
                <Field>
                    <FieldLabel>Select the Finance user(s) key</FieldLabel>
                    <SelectList TItem="Key"
                                TValue="int"
                                Data="@_selectedFinanceManagerAvailableKeys"
                                TextField="@((item)=> $"{item.Name}-{StringHelper.TruncateHeadAndTail(item.XPUB,10)}")"
                                ValueField="@((item)=>item.Id)"
                                SelectedValueChanged="@OnSelectedWalletKey"
                                DefaultItemText="Choose the key of the manager" />
                </Field>
            }
            else
            {
                <Alert Color="Color.Warning" Visible>
                    <AlertMessage>No keys found!</AlertMessage>
                    <AlertDescription>No keys are available for this Finance Manager, either are archived/compromised or already used.</AlertDescription>
                    
                </Alert>
                
            }

            <Field>
                <Alert Color="Color.Info" Visible>
                    <AlertMessage>Selected keys!</AlertMessage>
                    <AlertDescription>Take into account that the FundsManager key will be always be added to your wallet by the system</AlertDescription>
                    
                </Alert>
                <ReadOnlyKeyDatagrid Keys="@_selectedWalletKeysPlusInternalWalletKey"></ReadOnlyKeyDatagrid>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@SaveAndCloseModal">Add</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="_textModalRef">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@_textModalTitle</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>@_textModalContent</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseTextModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<Modal @ref="_finaliseModalRef">
    <ModalContent Centered Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>Do you want to finalise this wallet?</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>If you confirm to finalise this wallet, it will become a ready-to-use wallet for the system but at the same time you won't be allowed to update it in terms of keys, thresholds and other configuration parameters</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseAndCleanFinaliseModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@FinaliseWallet">Finalise</Button>

        </ModalFooter>
    </ModalContent>
</Modal>
@code {

    [CascadingParameter]
    private ApplicationUser? LoggedUser { get; set; }


    [CascadingParameter]
    private ClaimsPrincipal ClaimsPrincipal { get; set; }

    private List<ApplicationUser> _financeManagers = new();

    private Modal _modalRef;

    private List<Wallet> _wallets = new();

    private Wallet? _selectedWallet;

    private ApplicationUser? _selectedFinanceManager;

    private List<Key> _selectedWalletKeysPlusInternalWalletKey = new();
    private List<Key> _selectedFinanceManagerAvailableKeys = new();
    private Key? _selectedWalletKey;

    private Modal _textModalRef;
    private string _textModalTitle = string.Empty;
    private string _textModalContent = string.Empty;

    private Modal _finaliseModalRef;
    private Wallet? _selectedWalletToFinalise;

    private bool _isFinanceManager = false; 

    protected override async Task OnInitializedAsync()
    {
        if (LoggedUser != null)
        {
            if (ClaimsPrincipal.IsInRole(ApplicationUserRole.FinanceManager.ToString()))
            {
                _isFinanceManager = true;
            }
            await GetData();
        }
    }

    private async Task GetData()
    {

        _wallets = await WalletRepository.GetAll();
        var financeManagers = (await ApplicationUserRepository.GetUsersInRole(ApplicationUserRole.FinanceManager));
        _financeManagers = financeManagers.Where(x => x.Keys.Any()).ToList();

        if (_financeManagers.Any())
            _selectedFinanceManager = financeManagers.FirstOrDefault();
        if (_selectedFinanceManager?.Keys != null) 
            _selectedFinanceManagerAvailableKeys = await FilterKeys(_selectedFinanceManager.Keys);
    }


    private async Task OnRowInserted(SavedRowItem<Wallet, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var addResult = await WalletRepository.AddAsync(arg.Item);


        if (addResult.Item1)
        {
            ToastService.ShowSuccess("Success");
            await GetData();
        }
        else
        {
            ToastService.ShowError("Something went wrong");
            _wallets.Remove(arg.Item);

        }


    }

    private void NewItemDefaultSetter(Wallet obj)
    {

        obj.WalletAddressType = WalletAddressType.NativeSegwit;

    }

    private async Task OnRowRemoving(CancellableRowChange<Wallet> arg)
    {
        if (arg.Item != null)
        {

            var (result, message) = WalletRepository.Remove(arg.Item);

            if (!result)
            {

                arg.Cancel = true;
                ToastService.ShowError("Something went wrong");
            }
            else
            {
                ToastService.ShowSuccess("Success");
                await GetData();
            }
        }
    }


    private async Task OnRowUpdated(SavedRowItem<Wallet, Dictionary<string, object>> arg)
    {
        if (arg.Item == null) return;

        var updateResult = WalletRepository.Update(arg.Item);


        if (updateResult.Item1)
        {
            ToastService.ShowSuccess("Success");
        }
        else
        {
            ToastService.ShowError("Something went wrong");
        }

        await GetData();
    }

    private async Task CloseModal()
    {
        await CleanModal();
        await _modalRef.Close(CloseReason.UserClosing);
    }

    private async Task CleanModal()
    {
        _selectedWalletKeysPlusInternalWalletKey = new List<Key>();
        _selectedFinanceManager = _financeManagers.FirstOrDefault();
        _selectedFinanceManagerAvailableKeys = new();
  
        _selectedWallet = null;

    }

    private async Task LoadAndOpenModal(Wallet wallet)
    {
        await CleanModal();
        _selectedWallet = await WalletRepository.GetById(wallet.Id);


        if (_selectedWallet != null )
        {
            await GetData();

            //Modal data
            await GetModalDefaultData();


            await _modalRef.Show();
        }
    }

    private async Task SaveAndCloseModal()
    {
        if (_selectedWallet == null) return;

        //Add the key

        if (_selectedWalletKey != null)
        {
        
            _selectedWallet.Keys = new List<Key>();
            _selectedWallet.Keys.Add(_selectedWalletKey);

            var updateResult = WalletRepository.Update(_selectedWallet, true);

            if (updateResult.Item1)
            {
                ToastService.ShowSuccess("Key added");
            }
            else
            {
                ToastService.ShowError("Error while adding key...");
                
            }
        }
            

        await CleanModal();

        await GetData();

        await _modalRef.Close(CloseReason.UserClosing);
    }

    private async Task OnSelectedFinanceManager(string applicationUserId)

    {
        if (!string.IsNullOrWhiteSpace(applicationUserId))
        {
            var applicationUser = await ApplicationUserRepository.GetById(applicationUserId);
            _selectedFinanceManager = applicationUser;
            if (_selectedFinanceManager != null && _selectedFinanceManager.Keys.Any() && _selectedWallet != null)
            {
                //Filter Keys
                _selectedFinanceManagerAvailableKeys = await FilterKeys(_selectedFinanceManager.Keys);


            }

        }
    }

    private async Task<List<Key>>  FilterKeys(ICollection<Key> keys)
    {
        var result = new List<Key>();
        if (_selectedWallet != null && _selectedWallet.Keys != null)
        {
           result = keys.Where(x => !x.IsArchived && !x.IsCompromised && !x.IsFundsManagerPrivateKey).Except(_selectedWallet.Keys)
                .ToList();

        }
        else
        {
            result = keys.Where(x => !x.IsArchived && !x.IsCompromised && !x.IsFundsManagerPrivateKey)
                .ToList();
        }

        return result;
    }

    private async Task OnSelectedWalletKey(int keyId)
    {            

        _selectedWalletKeysPlusInternalWalletKey = new List<Key>();

        if (keyId > 0)
        {
            var selectedKey = await KeyRepository.GetById(keyId);

            if (selectedKey != null)
            {
                _selectedWalletKey = selectedKey;

                _selectedWalletKeysPlusInternalWalletKey.Add(selectedKey);

            }
         

        }

        await GetModalDefaultData();
    }

    private async Task GetModalDefaultData()
    {
        var currentInternalWalletKey = await KeyRepository.GetCurrentInternalWalletKey();

        if (_selectedWallet != null)
            _selectedWalletKeysPlusInternalWalletKey.AddRange(_selectedWallet.Keys.ToList());

        //TODO What happens when the internal wallet changes? This is not correct, FUTURE FIX required
        if (!_selectedWalletKeysPlusInternalWalletKey.Any(x => x.Id == currentInternalWalletKey.Id))
        {
            _selectedWalletKeysPlusInternalWalletKey.Add(currentInternalWalletKey);

        }

    }

    private async Task CleanTextModal()
    {
        _textModalContent = string.Empty;
        _textModalTitle = string.Empty;
    }

    private async Task CloseTextModal()
    {
        await CleanTextModal();
        
        await _textModalRef.Close(CloseReason.UserClosing);
    }

    private async Task LoadAndOpenTextModalBalance(Wallet wallet)
    {
        await CleanTextModal();
        if (wallet != null)
        {
            var balance = await LightningService.GetWalletBalance(wallet);

            if (balance != null)
            {
                _textModalTitle = $"Wallet: {wallet.Name} On-chain Balance";
                _textModalContent = $"Confirmed: {((Money) balance.Confirmed).ToUnit(MoneyUnit.BTC)} BTC Unconfirmed: {((Money) balance.Unconfirmed).ToUnit(MoneyUnit.BTC)} BTC";

                await _textModalRef.Show();
            }
            else
            {
                ToastService.ShowError("Error while getting the wallet on-chain balance");
            }
        }
       

    }

    private async Task LoadAndOpenModalTextModalUnusedAddress(Wallet wallet)
    {
        
        await CleanTextModal();
        if (wallet != null)
        {
            var bitcoinAddress = await LightningService.GetUnusedAddress(wallet, DerivationFeature.Deposit);

            if (bitcoinAddress != null)
            {
                _textModalTitle = $"Unused BTC Address for funding this wallet";
                _textModalContent = bitcoinAddress.ToString();
                await _textModalRef.Show();
            }
            else
            {
                ToastService.ShowError("Error while getting the wallet on-chain balance");
            }
        }
    }

    private async Task LoadAndOpenFinaliseTextModal(Wallet wallet)
    {

        _selectedWalletToFinalise = wallet;

        await _finaliseModalRef.Show();

    }

    private async Task FinaliseWallet()
    {
        if (_selectedWalletToFinalise == null || _selectedWalletToFinalise.IsFinalised)
            return;

        
        var result = await WalletRepository.FinaliseWallet(_selectedWalletToFinalise);

        if (result.Item1)
        {
            ToastService.ShowSuccess("Success");
        }
        else
        {
            ToastService.ShowError("Error while marking wallet as finalised");

        }

        _selectedWalletToFinalise = null;

        await _finaliseModalRef.Close(CloseReason.UserClosing);

        await GetData();
    }

    private async Task CloseAndCleanFinaliseModal()
    {
        
        _selectedWalletToFinalise = null;
        await _finaliseModalRef.Close(CloseReason.UserClosing);

    }

    private void ValidateThreshold(ValidatorEventArgs obj)
    {
        obj.Status = ValidationStatus.Success;
        if (obj.Value is int threshold)
        {
            if (threshold < 2 || threshold > 5)
            {
                obj.ErrorText = "The threshold should be minimum 2 and maximum 5";
                obj.Status = ValidationStatus.Error;
            }

        }
    }

}



