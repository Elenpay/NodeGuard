@namespace NodeGuard.Pages
@inject IJSRuntime JSRuntime

@if (ChannelStatusLogs?.Count > 0)
{
    <Tooltip Class="ml-2" Text="@GetTooltipText(ChannelStatusLogs)">
          <span @ondblclick="() => CopyTooltipText()">
            <Icon TextColor="TextColor.Danger" Name="IconName.InfoCircle"/>
          </span>
    </Tooltip>
}

@code {
   [Parameter, EditorRequired]
   public List<ChannelStatusLog>? ChannelStatusLogs { get; set; }
    
    private async Task CopyTooltipText()
    {
        List<ChannelStatusLog>? listToCopy = ChannelStatusLogs;
        if (listToCopy == null)
        {
            return;
        }

        string textToCopy = string.Join(", ", listToCopy.Select(item =>
            $"{item.DateTime.ToString("dd/MM/yyyy HH:mm:ss")} - {item.Description}"));

        await JSRuntime.InvokeVoidAsync("copyTooltipToClipboard", textToCopy);
    }

    private string GetTooltipText(List<ChannelStatusLog> channelStatusLogs)
    {
        var text = "<ul>";
        foreach (var channelStatusLog in channelStatusLogs)
        {
            var emoji = "";
            switch (channelStatusLog.Level)
            {
                case LogLevel.Information:
                    emoji = "ℹ️";
                    break;
                case LogLevel.Warning:
                    emoji = "⚠️";
                    break;
                case LogLevel.Error:
                    emoji = "❌";
                    break;
            }
            text += $"<li>{emoji} {channelStatusLog.DateTime:dd/MM/yyyy HH:mm:ss} - {channelStatusLog.Description}</li>";
        }
        text += "</ul>";
        text += $"<p>Double tap copy error text</p>";
        return text;
    }
}