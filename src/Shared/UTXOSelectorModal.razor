@using NBXplorer.Models
@using NBXplorer.DerivationStrategy
@using NBitcoin
@inject ICoinSelectionService _CoinSelectionService

<Modal @ref="@_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Select UTXOs for this wallet</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validation @ref="_validation" Validator="Validator">
                <DataGrid TItem="UTXO"
                          Data="@UTXOList"
                          SelectionMode="DataGridSelectionMode.Multiple"
                          @bind-SelectedRows="_selectedUTXOs"
                          Responsive>
                    <DataGridMultiSelectColumn Width="30px"></DataGridMultiSelectColumn>
                    <DataGridCommandColumn/>
                    <DataGridColumn Field="@nameof(UTXO.Index)" Caption="#" Sortable="true"/>
                    <DataGridColumn Field="@nameof(UTXO.Value)" Caption="Value" Sortable="true"/>
                    <DataGridColumn Field="@nameof(UTXO.KeyPath)" Caption="Address" Sortable="false"/>
                    <DataGridColumn Field="@nameof(UTXO.TransactionHash)" Caption="Address" Sortable="false"/>
                    <Feedback>@String.Join(",", _validation.Messages ?? GetUTXOsValues())</Feedback>
                </DataGrid>
            </Validation>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CancelSelection">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@CloseModal">Select UTXOs</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal? _modalRef { get; set; }
    public List<UTXO> UTXOList { get; set; } = new();
    private List<UTXO> _selectedUTXOs { get; set; } = new();

    [Parameter, EditorRequired]
    public List<UTXO> SelectedUTXOs { get; set; } = new();

    [Parameter, EditorRequired]
    public Action OnClose { get; set; } = () => { };

    [Parameter, EditorRequired]
    public Action<ValidatorEventArgs> Validator { get; set; } = ValidationRule.None;
    private Validation _validation { get; set; } = new();

    public void ClearModal()
    {
        UTXOList.Clear();
        _selectedUTXOs.Clear();
    }

    private async Task CancelSelection()
    {
        _selectedUTXOs.Clear();
        await _modalRef.Close(CloseReason.UserClosing);
    }

    private async Task CloseModal()
    {
        _validation.Validator = Validator;
        if (await _validation.ValidateAsync() != ValidationStatus.Error)
        {
            OnClose();
            await _modalRef.Close(CloseReason.UserClosing);
        }
    }

    public async Task ShowModal()
    {
        await _modalRef.Show();
        _selectedUTXOs.Clear();
        _selectedUTXOs = SelectedUTXOs;
        StateHasChanged();
    }

    private string[] GetUTXOsValues()
    {
        var value = SelectedUTXOs.Sum(x => ((Money)x.Value).Satoshi);
        return new[]
        {
            $"Selected {SelectedUTXOs.Count} for an amount of {value}"
        };
    }
}