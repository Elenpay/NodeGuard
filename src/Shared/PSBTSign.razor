@using NBitcoin
@using Microsoft.CodeAnalysis.Text
@using System.Xml.Schema
@using JSException = Microsoft.JSInterop.JSException
@using System.Runtime.InteropServices.JavaScript
@inject IJSRuntime JS
<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sign Operation: @(ChannelRequest?.Id ?? WithdrawalRequest?.Id ?? 0)</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Alert Color="Color.Warning" Visible>
                <AlertMessage>
                    Please sign the following PSBT with your Software/Hardware wallet
                    <Button Color="Color.Primary" Clicked="CopyPSBTToClipboard">
                        <i class="oi oi-clipboard"></i>
                    </Button>
                </AlertMessage>
                <MemoEdit Rows="4" @bind-Text="@TemplatePsbtString" Disabled="true" ElementId="psbt-to-sign"></MemoEdit>
            </Alert>
            <Fields Flex="Flex.JustifyContent.Center">
                <Field>
                    <FieldLabel>To sign this operation, please paste here your PSBT in base64 string</FieldLabel>
                    <textarea @ref="_PSBTField" id="psbt-to-paste" rows="4" class="form-control @(ValidationErrors.Length > 0 ? "is-invalid" : "")">
                    </textarea>
                    <div class="text-danger">@ValidationErrors</div>
                </Field>
            </Fields>
            <Fields Visibility="Visibility.Invisible" Style="height: 0" ElementId="channel-amount">@(ChannelRequest?.Amount ?? WithdrawalRequest?.Amount)</Fields>
            <Fields Visibility="Visibility.Invisible" Style="height: 0"  ElementId="request-type">@GetRequestType()</Fields>
            <Field id="approve-with-extension">Or click on your nodeguard signing extension to automatically sign</Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button id="approve-button" Color="Color.Primary" Clicked="@HandleOnClick">
                Approve
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@inject IJSRuntime JsRuntime
@code {
    [Inject]
    public IToastService ToastService { get; set; }

    [Parameter]
    public ChannelOperationRequest? ChannelRequest { get; set; }
    [Parameter]
    public WalletWithdrawalRequest? WithdrawalRequest { get; set; }

    [Parameter]
    public string TemplatePsbtString { get; set; }

    [Parameter]
    public Action ApproveRequestDelegate { get; set; }

    [Parameter]
    public  string? SignedPSBT { get; set; }

    [Parameter]
    public SigHash SigHashMode { get; set; } = SigHash.All;

    private bool _isSignedPSBTInvalid = true;
    private Modal? _modalRef;
    private ElementReference _PSBTField;
    private string ValidationErrors = string.Empty;

    private async Task HandleOnClick()
    {
        SignedPSBT = await GetTextAsync();
        ValidationErrors = ValidatePSBT(SignedPSBT);
        if (ValidationErrors.Length == 0)
        {
            ApproveRequestDelegate?.Invoke();
        }
    }
    
    public async Task<string> GetTextAsync()
    {
        try
        {
            var streamRef =
                await JS.InvokeAsync<IJSStreamReference>("getText", _PSBTField);
            var stream = await streamRef.OpenReadStreamAsync(maxAllowedSize: 1024L * 1024L); // 1MB
            var streamReader = new StreamReader(stream);

            return await streamReader.ReadToEndAsync();
        }
        catch (JSException jsException)
        {
            if (jsException.InnerException is
                ArgumentOutOfRangeException outOfRangeException &&
                outOfRangeException.ActualValue is not null &&
                outOfRangeException.ActualValue is long actualLength &&
                actualLength == 0)
            {
                return string.Empty;
            }

            throw;
        }
    }

    private async Task CopyPSBTToClipboard()
    {
        await ClipboardService.WriteTextAsync(TemplatePsbtString);
        ToastService.ShowSuccess("PSBT copied");
    }

    public async Task ShowModal()
    {
        ValidationErrors = string.Empty;
        await JsRuntime.InvokeAsync<string>("clearText");
        if (_modalRef != null)
            await _modalRef.Show();
    }

    public async Task HideModal()
    {
        TemplatePsbtString = null;
        _isSignedPSBTInvalid = true;

        if (_modalRef != null)
            await _modalRef.Close(CloseReason.UserClosing);
    }

    private void PSBTValidator(ValidatorEventArgs obj)
    {
        var psbtBase64 = (string)obj.Value;
        //Error by default
        obj.Status = ValidationStatus.Error;
        obj.ErrorText = string.Empty;

        if (string.IsNullOrWhiteSpace(ValidatePSBT(psbtBase64)))
        {
            obj.Status = ValidationStatus.Success;
        }
    }

    private string ValidatePSBT(string psbtBase64)
    {
        var errorText =string.Empty;
        if (psbtBase64 != null && PSBT.TryParse(psbtBase64, CurrentNetworkHelper.GetCurrentNetwork(), out var templatePSBT))
        {
            if (PSBT.TryParse(psbtBase64, CurrentNetworkHelper.GetCurrentNetwork(), out var parsedPSBT))
            {
                var templateInputsOutpoints = templatePSBT.Inputs.Select(x => x.PrevOut).ToList();
                var parsedPSBTInputsOutpoints = parsedPSBT.Inputs.Select(x => x.PrevOut).ToList();

                //TXID Validation
                if (parsedPSBT.GetGlobalTransaction().GetHash() != templatePSBT.GetGlobalTransaction().GetHash())
                {
                    errorText += "Invalid PSBT, the transactions id do not match. ";

                }
                //If all the inputs are not signed this is invalid
                else if (!parsedPSBT.Inputs.All(x => x.PartialSigs.Any()))
                {
                    errorText += $"Invalid PSBT, please make sure to use Sighash: {SigHashMode} and that every input is signed. ";
                }

                //Sighash check
                else if (!parsedPSBT.Inputs.Any(x => x.PartialSigs.All(y=> y.Value.SigHash == SigHashMode)))
                {
                    errorText += $"Invalid PSBT, please make sure to use Sighash: {SigHashMode} and that every input is signed. ";
                }
                //If the inputs outpoints (utxos) are not the same to the template invalidate it
                else if (templateInputsOutpoints.Union(parsedPSBTInputsOutpoints).Count() != templateInputsOutpoints.Count())
                {
                    errorText += "Invalid PSBT, the UTXOs do not match ";
                }
                else
                {
                    //It looks good
                    _isSignedPSBTInvalid = false;
                }
            }
            else
            {
                errorText = "Invalid PSBT, it could not be parsed";
            }
        }
        else
        {
            errorText = "Invalid template PSBT, it could not be parsed";
        }

        return errorText;
    }

    private string GetRequestType()
    {
        if (ChannelRequest != null) return "Channel Opening Request";
        if (WithdrawalRequest != null) return "Withdrawal Request";
        return "Invalid Request Type";
    }
}
