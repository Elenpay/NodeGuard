@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@using System.Security.Claims
@using System.Timers
@using Humanizer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IApplicationUserRepository ApplicationUserRepository
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IInternalWalletRepository InternalWalletRepository

<PageTitle>NodeGuard</PageTitle>


<CascadingValue Value="_loggedUser">
    <CascadingValue Value="_claimsPrincipal">
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>

        <div class="top-row px-4 auth">
            <LoginDisplay />
        </div>

        <BlazoredToasts Position="ToastPosition.BottomRight"
                        Timeout="10"
                        IconType="IconType.FontAwesome"
                        SuccessClass="success-toast-override"
                        SuccessIcon="fa fa-thumbs-up"
                        ErrorIcon="fa fa-bug"
                        ShowProgressBar="true"
                        RemoveToastsOnNavigation="true" />

                <article class="content px-4">
                    @Body
                </article>
        
    </main>
</div>
    </CascadingValue>
</CascadingValue>
@code
{
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private ApplicationUser? _loggedUser;
    private ClaimsPrincipal _claimsPrincipal;
    private Timer? inactivityTimer;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();

        _claimsPrincipal = (await AuthenticationStateTask).User;
        if (_claimsPrincipal.Identity != null && !_claimsPrincipal.Identity.IsAuthenticated)
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"Identity/Account/Login?&returnUrl=/{returnUrl}", true);
        }
        else
        {
            //User retrieval
            
            if (_claimsPrincipal?.Identity != null && _claimsPrincipal.Identity.IsAuthenticated)
            {
                if (_claimsPrincipal.Identity.Name != null) _loggedUser = await ApplicationUserRepository.GetByUsername(_claimsPrincipal.Identity.Name);
                if (_loggedUser?.Id != null) LinkNotificationsUser(_loggedUser.Id);
                //Get current internal wallet
                var internalWallet = await InternalWalletRepository.GetCurrentInternalWallet();
        
                
                //If the internal wallet does not exist
                if (internalWallet == null || (Constants.ENABLE_REMOTE_SIGNER && string.IsNullOrWhiteSpace(internalWallet.XPUB) 
                                               && string.IsNullOrWhiteSpace(internalWallet.MasterFingerprint)))
                {
                   //Navigate to Setup Internal Wallet
                    NavigationManager.NavigateTo("/setup-internal-wallet", false);
                    
                }
            }
        }

        LinkInactiveUserLogout();
    }

    protected void LinkInactiveUserLogout()
    {
        JsRuntime.InvokeAsync<string>("logoutInactiveUser", DotNetObjectReference.Create(this));
        inactivityTimer = new Timer(Constants.SESSION_TIMEOUT_MILLISECONDS);
        inactivityTimer.Elapsed += LogoutUser;
        inactivityTimer.AutoReset = false;
        inactivityTimer.Start();
    }

    protected void LinkNotificationsUser(String userId)
    {
        JsRuntime.InvokeAsync<string>("associateNotificationUser", userId);
    }

    [JSInvokable]
    public void ResetTimer()
    {
        inactivityTimer?.Stop();
        inactivityTimer?.Start();
    }

    protected void LogoutUser(Object? source, System.Timers.ElapsedEventArgs e)
    {
        NavigationManager.NavigateTo("/Identity/Account/Logout", true);
    }

}
