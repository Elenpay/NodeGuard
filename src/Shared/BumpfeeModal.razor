@using NBitcoin
@using Microsoft.CodeAnalysis.Text
@using System.Xml.Schema
@using JSException = Microsoft.JSInterop.JSException
@using System.Runtime.InteropServices.JavaScript
<Modal @ref="_modalRef">
    @if (WithdrawalRequest != null) 
    {
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Bumpfee Withdrawal</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Fields Flex="Flex.JustifyContent.Center">
                <Field>
                    <FieldLabel>@nameof(WalletWithdrawalRequest.CustomFeeRate)</FieldLabel>
                    <div class="d-flex">
                        <Select TValue="MempoolRecommendedFeesType" SelectedValue="_selectedMempoolRecommendedFeesType" SelectedValueChanged="async (value) => await OnMempoolFeeRateChange(value)">
                            <SelectGroup Label="Mempool.space fee">
                                <SelectItem Value="MempoolRecommendedFeesType.FastestFee">Fastest Fee</SelectItem>
                                <SelectItem Value="MempoolRecommendedFeesType.EconomyFee">Economy Fee</SelectItem>
                                <SelectItem Value="MempoolRecommendedFeesType.HourFee">Hour Fee</SelectItem>
                                <SelectItem Value="MempoolRecommendedFeesType.HalfHourFee">Half Hour Fee</SelectItem>
                            </SelectGroup>
                            <SelectItem Value="MempoolRecommendedFeesType.CustomFee">Custom</SelectItem>
                        </Select>
                        <NumericPicker TValue="long" @bind-Value="@_customSatPerVbAmount" CurrencySymbolPlacement="CurrencySymbolPlacement.Suffix" CurrencySymbol=" sats/vb" Min="1" Disabled="@(_selectedMempoolRecommendedFeesType != MempoolRecommendedFeesType.CustomFee)">
                        </NumericPicker>
                    </div>
                    <FieldHelp>@(_selectedMempoolRecommendedFeesType != MempoolRecommendedFeesType.CustomFee ? "Fees may change by the time the request is first signed" : "")</FieldHelp>
                    <FieldLabel class="mt-3">Last fee used</FieldLabel>
                    <div class="d-flex">
                        <Select TValue="MempoolRecommendedFeesType"
                                SelectedValue="@(WithdrawalRequest?.MempoolRecommendedFeesType ?? MempoolRecommendedFeesType.FastestFee)">
                            @if (WithdrawalRequest != null)
                            {
                                var lastFeeType = WithdrawalRequest.MempoolRecommendedFeesType;
                                var lastFeeLabel = lastFeeType switch
                                {
                                    MempoolRecommendedFeesType.FastestFee => "Fastest Fee",
                                    MempoolRecommendedFeesType.EconomyFee => "Economy Fee",
                                    MempoolRecommendedFeesType.HourFee => "Hour Fee",
                                    MempoolRecommendedFeesType.HalfHourFee => "Half Hour Fee",
                                    MempoolRecommendedFeesType.CustomFee => "Custom",
                                    _ => lastFeeType.ToString()
                                };
                                <SelectItem Value="@lastFeeType">@lastFeeLabel</SelectItem>
                            }
                        </Select>
                        <NumericPicker TValue="long"
                                       Value="@(WithdrawalRequest != null ? (long)WithdrawalRequest.CustomFeeRate : 0)"
                                       CurrencySymbolPlacement="CurrencySymbolPlacement.Suffix"
                                       CurrencySymbol=" sats/vb"
                                       Min="1"
                                       Disabled="true">
                        </NumericPicker>
                    </div>
                    <FieldHelp>@(_selectedMempoolRecommendedFeesType != MempoolRecommendedFeesType.CustomFee ? "Fees must be greater than the current one" : "")</FieldHelp>

                </Field>
            </Fields>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Cancel</Button>
            <Button id="approve-button" Color="Color.Primary" Clicked="@HandleOnClick">
                Approve
            </Button>
        </ModalFooter>
    </ModalContent>
    }
</Modal>

@inject IBitcoinService BitcoinService
@inject IPriceConversionService PriceConversionService
@inject INBXplorerService NBXplorerService
@inject IWalletWithdrawalRequestRepository WalletWithdrawalRequestRepository
@inject IWalletRepository WalletRepository
@inject IFMUTXORepository FMUTXORepository
@code {
    [Inject]
    public IToastService ToastService { get; set; }

    [Parameter]
    public ChannelOperationRequest? ChannelRequest { get; set; }
    [Parameter]
    public WalletWithdrawalRequest? WithdrawalRequest { get; set; }

    [Parameter]
    public Action<WalletWithdrawalRequest> SubmitBumpfeeModal { get; set; }

    private decimal? _selectedWalletBalance;
    private decimal _btcPrice;

    private MempoolRecommendedFeesType _selectedMempoolRecommendedFeesType;
    private long _customSatPerVbAmount = 1;

    private Modal? _modalRef;

    private async Task HandleOnClick()
    {
        long _currentSatsPerVbAmount = (long?)await NBXplorerService.GetFeesByType(WithdrawalRequest.MempoolRecommendedFeesType) ?? 1;
        if (_customSatPerVbAmount <= _currentSatsPerVbAmount) {
            ToastService.ShowError($"Fee must be greater than the current one ({_currentSatsPerVbAmount} sats/vB)");
        } else {
            WalletWithdrawalRequest newRequest = new WalletWithdrawalRequest();
            newRequest.Description = WithdrawalRequest.Description;
            newRequest.DestinationAddress = WithdrawalRequest.DestinationAddress;
            newRequest.Amount = WithdrawalRequest.Amount;
            newRequest.Changeless = WithdrawalRequest.Changeless;
            newRequest.WithdrawAllFunds = WithdrawalRequest.WithdrawAllFunds;
            newRequest.MempoolRecommendedFeesType = _selectedMempoolRecommendedFeesType;
            newRequest.CustomFeeRate = _customSatPerVbAmount;
            newRequest.UserRequestorId = WithdrawalRequest.UserRequestorId;
            newRequest.BumpingId = WithdrawalRequest.Id;
            SubmitBumpfeeModal?.Invoke(newRequest);
        }
    }
    
    public async Task ShowModal()
    {
        var walletId = WithdrawalRequest?.WalletId ?? -1;
        if (walletId != -1) {
            var wallet = await WalletRepository.GetById(walletId);
            var (balance, _) = await BitcoinService.GetWalletConfirmedBalance(wallet);
            _selectedWalletBalance = balance;
        }
        _btcPrice = await PriceConversionService.GetBtcToUsdPrice();
        if (_modalRef != null)
            await _modalRef.Show();
    }

    public async Task HideModal()
    {
        if (_modalRef != null)
            await _modalRef.Close(CloseReason.UserClosing);
    }

    private async Task OnMempoolFeeRateChange(MempoolRecommendedFeesType value)
    {
        _selectedMempoolRecommendedFeesType = value;
        _customSatPerVbAmount = (long?)await NBXplorerService.GetFeesByType(_selectedMempoolRecommendedFeesType) ?? 1;
    }
}
