syntax = "proto3";

package nodeguard;

option go_package = "./nodeguard";

service NodeGuardService {
  /*

  Returns the liquidity rules associated to a node and its channels
  */
  rpc GetLiquidityRules(GetLiquidityRulesRequest) returns (GetLiquidityRulesResponse);

  /*
  Returns a new unused BTC Address of a given wallet
  */
  rpc GetNewWalletAddress(GetNewWalletAddressRequest) returns (GetNewWalletAddressResponse);

  /*
    Withdraws funds from a given wallet to a given address
    */
  rpc RequestWithdrawal(RequestWithdrawalRequest) returns (RequestWithdrawalResponse);
  /*
    Adds a new node to the nodeguard
   */
  rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

  /*
    Gets a list of nodes
   */
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);

  /*
    Gets a list of available wallets
  */
  rpc GetAvailableWallets(GetAvailableWalletsRequest) returns (GetAvailableWalletsResponse);
  /*
    Opens a channel to a given node
   */
  rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse);

  /*
    Closes a channel to a given node
   */
  rpc CloseChannel(CloseChannelRequest) returns (CloseChannelResponse);

  /*
    Gets a list of channel operations requests by id
   */
  rpc GetChannelOperationRequest(GetChannelOperationRequestRequest) returns (GetChannelOperationRequestResponse);

  /*
  Adds a liquidity rule to a channel
   */
  rpc AddLiquidityRule(AddLiquidityRuleRequest) returns (AddLiquidityRuleResponse);
  
  /*
  Gets a channel by id
   */
  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse);
}

message GetLiquidityRulesRequest {
  string node_pubkey = 1;
}

message GetLiquidityRulesResponse {
  repeated LiquidityRule liquidity_rules = 1;
}

message LiquidityRule {
  uint64 channel_id = 1;
  string node_pubkey = 2;
  int32 wallet_id = 3;
  float minimum_local_balance = 4;
  float minimum_remote_balance = 5;
  float rebalance_target = 6;
}

message GetNewWalletAddressRequest {
  int32 wallet_id = 1;
}

message GetNewWalletAddressResponse {
  string address = 1;
}

message RequestWithdrawalRequest {
  int32 wallet_id = 1;
  string address = 2;
  // Amount in satoshis
  int64 amount = 3;
  string description = 4;
  // in JSON format
  string request_metadata = 5;
}

message RequestWithdrawalResponse {
  //  optionalTransaction ID of the withdrawal
  string txid = 1;
  bool is_hot_wallet = 2;
}

enum WALLET_TYPE {
  BOTH = 0;
  HOT = 1;
  COLD = 2;
}

message GetAvailableWalletsRequest {
  repeated int32 id = 1;
  optional WALLET_TYPE wallet_type = 2;
}

message AccountKeySettings  {
  string xpub = 1;
}
message Wallet  {
  int32 id = 1;
  string name = 2;
  bool is_hot_wallet = 3;
  repeated AccountKeySettings account_key_settings = 4;
}
message GetAvailableWalletsResponse {
  repeated Wallet wallets = 1;
}

message AddNodeRequest{
  string pub_key = 1;
  string name = 2;
  string description = 3;
  // Channel admin macaroon
  string channel_admin_macaroon = 4;
  // Endpoint of the node in the form of host:port (gRPC)
  string endpoint = 5;
  // Whether this node's hot wallet should be autoswept to the returning funds wallet
  bool   autosweep_enabled = 6;
  // Wallet ID as stored in the NG's database for use in autosweep ops
  int32 returning_funds_wallet_id = 7;
}

message AddNodeResponse{
}

message Node {
  // Node Id as in NodeGuard's database
  int32 id = 1;
  string pub_key = 2;
  string name = 3;
  string description = 4;
  // Endpoint of the node in the form of host:port (gRPC)
  string endpoint = 5;
  // Whether this node's hot wallet should be autoswept to the returning funds wallet
  bool autosweep_enabled = 6;
  // Wallet ID as stored in the NG's database for use in autosweep ops
  int32 returning_funds_wallet_id = 7;

}

message GetNodesRequest{
  // Whether to include nodes that are not managed by the NG
  bool include_unmanaged = 1;
}

message GetNodesResponse{
  repeated Node nodes = 1;
}

enum FEES_TYPE {
  CUSTOM_FEE = 0;
  FASTEST_FEE = 1;
  HOUR_FEE = 2;
  HALF_HOUR_FEE = 3;
  ECONOMY_FEE = 4;
}

message OpenChannelRequest {
  // Source node pubkey
  string source_pub_key = 5;
  // Destination node pubkey
  string destination_pub_key = 1;
  // Wallet ID as stored in the NG's database
  int32 wallet_id = 2;
  // Amount in satoshis
  int64 sats_amount = 3;
  // Whether the channel should be private
  bool private = 4;
  // Whether the channel should be created in a changeless way
  bool changeless = 6;
  // Outpoints for the UTXOs to use for the channel
  repeated string utxos_outpoints = 7;
  // MempoolRecommended fee rate
  FEES_TYPE mempool_fee_rate = 8;
  // Fee rate in sat/vbyte
  optional int32 custom_fee_rate = 9;
}

// A successful response returns the channel_operation_request_id but it does NOT indicate that the channel has been open, external monitoring is required
message OpenChannelResponse {
  int32 channel_operation_request_id = 1;
}

message CloseChannelRequest {
  // Channel ID as returned by the Lightning implementation
  uint64 channel_id = 1;
  // Force close the channel
  bool force = 2;
}

// A successful response is an empty message and does NOT indicate that the channel has been closed, external monitoring is required
message CloseChannelResponse {
}

message GetChannelOperationRequestRequest {
  // Whether to include requests that are not managed by the NG
  int32 channel_operation_request_id = 1;
}

enum CHANNEL_OPERATION_STATUS {
  APPROVED = 0;
  CANCELLED = 1;
  REJECTED = 2;
  PENDING = 3;
  PSBT_SIGNATURES_PENDING = 4;
  ONCHAIN_CONFIRMATION_PENDING = 5;
  ONCHAIN_CONFIRMED = 6;
  FAILED = 7;
  FINALIZINGPSBT = 8;
}

enum CHANNEL_OPERATION_TYPE {
  OPEN_CHANNEL = 0;
  CLOSE_CHANNEL = 1;
}

message GetChannelOperationRequestResponse {
  int64 sats_amount = 1;
  string description = 2;
  optional CHANNEL_OPERATION_STATUS status = 3;
  optional CHANNEL_OPERATION_TYPE type = 4;
  optional string tx_id = 5;
  optional string closing_reason = 6;
  optional double fee_rate = 7;
  optional int32 wallet_id = 8;
  int32 source_node_id = 9;
  optional int32 dest_node_id = 10;
  optional int64 channel_id = 11;
  bool private = 12;
  string job_id = 13;
}

message AddLiquidityRuleRequest {
// Channel ID from NGs database
  int32 channel_id = 1;
  // Wallet ID as stored in the NG's database
  int32 wallet_id = 2;
  // Minimum local balance
  optional double minimum_local_balance = 3;
  // Minimum remote balance
  optional double minimum_remote_balance = 4;
  // Rebalance target
  optional double rebalance_target = 5;
}

message AddLiquidityRuleResponse {
  // Rule ID as stored in the NG's database
  int32 rule_id = 1;
}

message GetChannelRequest {
  // Channel ID from NGs database
  int32 channel_id = 1;
}

enum CHANNEL_STATUS {
  OPEN = 0;
  CLOSE = 1;
}

message GetChannelResponse {
  string funding_tx = 1;
  uint32 output_index = 2;
  uint64 chan_id = 3;
  int64 sats_amount = 4;
  optional string btc_close_address = 5;
  CHANNEL_STATUS status = 6;
  bool created_by_nodeguard = 7;
  bool is_automated_liquidity_enabled = 8;
  bool is_private = 9;
}