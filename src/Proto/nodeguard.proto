syntax = "proto3";

package nodeguard;

option go_package = "./nodeguard";

service NodeGuardService {
  /*

  Returns the liquidity rules associated to a node and its channels
  */
  rpc GetLiquidityRules(GetLiquidityRulesRequest) returns (GetLiquidityRulesResponse);

  /*
  Returns a new unused BTC Address of a given wallet
  */
  rpc GetNewWalletAddress(GetNewWalletAddressRequest) returns (GetNewWalletAddressResponse);

  /*
    Withdraws funds from a given wallet to a given address
    */
  rpc RequestWithdrawal(RequestWithdrawalRequest) returns (RequestWithdrawalResponse);
  /*
    Adds a new node to the nodeguard
   */
  rpc AddNode(AddNodeRequest) returns (AddNodeResponse);

  /*
    Gets a list of nodes
   */
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);

  /*
    Gets a list of available wallets
  */
  rpc GetAvailableWallets(GetAvailableWalletsRequest) returns (GetAvailableWalletsResponse);
  /*
    Opens a channel to a given node
   */
  rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse);

  /*
    Closes a channel to a given node
   */
  rpc CloseChannel(CloseChannelRequest) returns (CloseChannelResponse);

  /*
    Opens a channel to a given node with the UTXOs of the given wallet
   */
  rpc OpenChangelessChannel(OpenChangelessChannelRequest) returns (OpenChangelessChannelResponse);
}

message GetLiquidityRulesRequest {
  string node_pubkey = 1;
}

message GetLiquidityRulesResponse {
  repeated LiquidityRule liquidity_rules = 1;
}

message LiquidityRule {
  uint64 channel_id = 1;
  string node_pubkey = 2;
  int32 wallet_id = 3;
  float minimum_local_balance = 4;
  float minimum_remote_balance = 5;
  float rebalance_target = 6;
}

message GetNewWalletAddressRequest {
  int32 wallet_id = 1;
}

message GetNewWalletAddressResponse {
  string address = 1;
}

message RequestWithdrawalRequest {
  int32 wallet_id = 1;
  string address = 2;
  // Amount in satoshis
  int64 amount = 3;
  string description = 4;
  // in JSON format
  string request_metadata = 5;
}

message RequestWithdrawalResponse {
  //  optionalTransaction ID of the withdrawal
  string txid = 1;
  bool is_hot_wallet = 2;
}

enum WALLET_TYPE {
  BOTH = 0;
  HOT = 1;
  COLD = 2;
}

message GetAvailableWalletsRequest {
  repeated int32 id = 1;
  optional WALLET_TYPE wallet_type = 2;
}

message AccountKeySettings  {
  string xpub = 1;
}
message Wallet  {
  int32 id = 1;
  string name = 2;
  bool is_hot_wallet = 3;
  repeated AccountKeySettings account_key_settings = 4;
}
message GetAvailableWalletsResponse {
  repeated Wallet wallets = 1;
}

message AddNodeRequest{
  string pub_key = 1;
  string name = 2;
  string description = 3;
  // Channel admin macaroon
  string channel_admin_macaroon = 4;
  // Endpoint of the node in the form of host:port (gRPC)
  string endpoint = 5;
  // Whether this node's hot wallet should be autoswept to the returning funds wallet
  bool   autosweep_enabled = 6;
  // Wallet ID as stored in the NG's database for use in autosweep ops
  int32 returning_funds_wallet_id = 7;
}

message AddNodeResponse{
}

message Node {
  // Node Id as in NodeGuard's database
  int32 id = 1;
  string pub_key = 2;
  string name = 3;
  string description = 4;
  // Endpoint of the node in the form of host:port (gRPC)
  string endpoint = 5;
  // Whether this node's hot wallet should be autoswept to the returning funds wallet
  bool autosweep_enabled = 6;
  // Wallet ID as stored in the NG's database for use in autosweep ops
  int32 returning_funds_wallet_id = 7;

}

message GetNodesRequest{
  // Whether to include nodes that are not managed by the NG
  bool include_unmanaged = 1;
}

message GetNodesResponse{
  repeated Node nodes = 1;
}

message OpenChannelRequest {
  // Source node pubkey
  string source_pub_key = 5;
  // Destination node pubkey
  string destination_pub_key = 1;
  // Wallet ID as stored in the NG's database
  int32 wallet_id = 2;
  // Amount in satoshis
  int64 sats_amount = 3;
  // Whether the channel should be private
  bool private = 4;

}

// A successful response is an empty message and does NOT indicate that the channel has been open, external monitoring is required
message OpenChannelResponse {
}

message CloseChannelRequest {
  // Channel ID as returned by the Lightning implementation
  uint64 channel_id = 1;
  // Force close the channel
  bool force = 2;
}

// A successful response is an empty message and does NOT indicate that the channel has been closed, external monitoring is required
message CloseChannelResponse {
}

message OpenChangelessChannelRequest {
  // Source node pubkey
  string source_pub_key = 5;
  // Destination node pubkey
  string destination_pub_key = 1;
  // Wallet ID as stored in the NG's database
  int32 wallet_id = 2;
  // Amount in satoshis
  int64 sats_amount = 3;
  // Whether the channel should be private
  bool private = 4;
  // UTXOs to use for the channel
  repeated string utxos = 6;
}

// A successful response is an empty message and does NOT indicate that the channel has been open, external monitoring is required
message OpenChangelessChannelResponse {
}